@*******************************************************************************************************
//  OutputMirrors.cshtml - Gbtc
//
//  Copyright © 2022, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  12/27/2022 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Text
@using GSF
@using GSF.Web
@using GSF.Web.Model
@using openMIC
@using openMIC.FileMirroring
@using openMIC.Model
@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }

        .tooltip.bottom .tooltip-inner {
            max-width: 800px;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;

    Layout = "Layout.cshtml";
    ViewBag.Title = "Output Mirrors";

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-left" },
        new[] { "Source", "Source", "text-center valign-middle" },
        new[] { "ConnectionType", "Connection Type", "text-center valign-middle" },
    };

    Dictionary<string, string> connectionTypes = new Dictionary<string, string>();

    foreach (Enum option in Enum.GetValues(typeof(OutputMirrorConnectionType)))
    {
        connectionTypes.Add(option.ToString(), option.GetDescription());
    }

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext, connectionTypes).ToString();

    StringBuilder connectionTypeDict = new StringBuilder();

    connectionTypeDict.AppendLine("const connectionTypes = {");

    foreach (KeyValuePair<string, string> connectionType in connectionTypes)
    {
        connectionTypeDict.AppendFormat("            {0}: \"{1}\",{2}", connectionType.Key, connectionType.Value, Environment.NewLine);
    }

    connectionTypeDict.Append("        };");

    dataContext.AddFieldValidation("viewModel.connectionString.get('port')", "^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$", "Port number must be an integer between 1 and 65535");
}
@helper BodyRows()
{
    <td width="25%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="text: Name, click: $parent.viewPageRecord"></button></td>
    <td width="45%" class="text-center valign-middle"><div data-bind="text: $($element.parentElement).truncateToWidth(Source, 2)"></div></td>
    <td width="25%" class="text-center valign-middle" data-bind="text: connectionTypes[ConnectionType]"><</td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext, Dictionary<string, string> connectionTypes)
{
    <div class="col-md-6">
        @Raw(dataContext.AddInputField<OutputMirror>("Name", initialFocus: true))
        @Raw(dataContext.AddInputField<OutputMirror>("Source", enableHotLinks: false))
        @Raw(dataContext.AddSelectField<OutputMirror>(connectionTypes, "ConnectionType", false, allowUnset: false))
        @Raw(dataContext.AddInputField("get('remotepath')", true, fieldLabel: "Output Mirror Root Path<span class=\"pull-right\">&nbsp;&nbsp;&nbsp;<small>(Configured Default: " + Model.Global.DefaultRemotePath.HtmlEncode() + ")</small></span>", fieldID: "inputRemotePath", groupDataBinding: "with: $root.connectionString", enableHotLinks: false))
        @Raw(dataContext.AddCheckBoxField("get('synccopy')", "Sync Copies from Source to Output", "checkSyncCopy", "with: $root.connectionString"))
        @Raw(dataContext.AddCheckBoxField("get('syncdelete')", "Sync Deletes from Source to Output", "checkSyncDelete", "with: $root.connectionString"))
        @Raw(dataContext.AddCheckBoxField("get('enablefullsyncops')", "Monitor Changes and Sync Full Source File System to Output", "checkEnableFullSyncOps", "with: $root.connectionString", dependencyFieldName: "FullSyncOpsEnabled"))
    </div>
    <div class="col-md-6">
        @Raw(dataContext.AddInputField("get('host')", true, fieldLabel: "Remote Mirror Host Name or IP", fieldID: "inputHost", groupDataBinding: "with: $root.connectionString", dependencyFieldName: "HostEnabled", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('port')", false, inputType: "number", fieldLabel: "Remote Mirror Host Port (if applicable)", fieldID: "inputPort", groupDataBinding: "with: $root.connectionString", dependencyFieldName: "PortEnabled", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('username')", false, fieldLabel: "Remote Mirror Host Connection Username", fieldID: "inputUsername", groupDataBinding: "with: $root.connectionString", dependencyFieldName: "UsernameEnabled", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('password')", false, inputType: "password", fieldLabel: "Remote Mirror Host Connection Password (or Pass-phrase)", fieldID: "inputPassword", groupDataBinding: "with: $root.connectionString", dependencyFieldName: "PasswordEnabled", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('keyfile')", false, fieldLabel: "Remote Mirror Host Key File (if applicable)", fieldID: "inputKeyFile", groupDataBinding: "with: $root.connectionString", dependencyFieldName: "KeyFileEnabled", enableHotLinks: false))
    </div>
    <div class="col-md-12">
        @Raw(dataContext.AddInputField("get('othersettings')", false, fieldLabel: "Custom Connection Type Settings<span class=\"pull-right\">&nbsp;&nbsp;<button type=\"button\" id=\"applyDefaultSettingsButton\" class=\"btn btn-default\" style=\"padding: 0px 6px; margin-top: -3px\" data-bind=\"attr: {'disabled': ($root.recordMode()===RecordMode.View ? true : undefined)}\"><small>Apply Defaults &gt;&gt;</small></button></span>", fieldID: "inputOtherSettings", groupDataBinding: "with: $root.connectionString", toolTip: "Custom Key/Value Settings", enableHotLinks: false))
    </div>
    <div class="col-md-12">
        <div class="form-group">
            <label for="textConnectionString">Task Settings:</label>
            <textarea class="form-control" rows="2" data-bind="text: ConnectionString" id="textConnectionString" readonly></textarea>
        </div>
    </div>
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts {
    <script>
        "use strict";

        @Raw(dataContext.RenderViewModelConfiguration<OutputMirror, DataHub>(ViewBag, "Name"))
        @Raw(connectionTypeDict.ToString())

        // Define default connection string keys needed for OutputMirrorSettings class binding
        const defaultConnectionString = new Dictionary();

        defaultConnectionString.set("remotePath", "");
        defaultConnectionString.set("host", "");
        defaultConnectionString.set("port", "");
        defaultConnectionString.set("username", "");
        defaultConnectionString.set("password", "");
        defaultConnectionString.set("keyFile", "");
        defaultConnectionString.set("syncCopy", true);
        defaultConnectionString.set("syncDelete", true);
        defaultConnectionString.set("enableFullSyncOps", false);
        defaultConnectionString.set("otherSettings", "");

        // Create an observable key/value pair connection string dictionary
        viewModel.connectionString = defaultConnectionString.toObservableDictionary(true);
        viewModel.loadingConnectionString = false;

        viewModel.connectionString.HostEnabled = ko.pureComputed({
            read: function () {
                const record = viewModel.currentRecord();

                if (record)
                    return record.ConnectionType() !== "FileSystem";

                return false;
            },
            owner: viewModel
        });

        viewModel.connectionString.PortEnabled = ko.pureComputed({
            read: function () {
                const record = viewModel.currentRecord();
                var enabled = false;

                if (record) {
                    const connectionType = record.ConnectionType();
                    enabled = connectionType !== "FileSystem" && connectionType !== "UNC";
                }

                if (!enabled)
                    viewModel.connectionString.set("port", "");

                return enabled;
            },
            owner: viewModel
        });

        viewModel.connectionString.UsernameEnabled = ko.pureComputed({
            read: function () {
                const record = viewModel.currentRecord();

                if (record)
                    return record.ConnectionType() !== "FileSystem";

                return false;
            },
            owner: viewModel
        });

        viewModel.connectionString.PasswordEnabled = ko.pureComputed({
            read: function () {
                const record = viewModel.currentRecord();

                if (record)
                    return record.ConnectionType() !== "FileSystem";

                return false;
            },
            owner: viewModel
        });

        viewModel.connectionString.KeyFileEnabled = ko.pureComputed({
            read: function () {
                const record = viewModel.currentRecord();

                if (record)
                    return record.ConnectionType() === "SFTP";

                return false;
            },
            owner: viewModel
        });

        viewModel.connectionString.FullSyncOpsEnabled = ko.pureComputed({
            read: function () {
                return false; // Feature currently disabled
            },
            owner: viewModel
        });

        function applyConnectionTypeAttrs() {

            $("input[id=inputRemotePath]").attr("autocomplete", "off")
            $("input[id=inputOtherSettings]").attr("autocomplete", "off");

            switch (viewModel.currentRecord().ConnectionType()) {
                case "FileSystem":
                    setRequiredStates(["host"], false);
                    $("input[id=inputRemotePath]").attr("placeholder", "C:\\MirrorPath\\")
                    $("input[id=inputHost]").attr("placeholder", "");
                    $("input[id=inputPort]").attr("placeholder", "");
                    $("input[id=inputUsername]").attr("placeholder", "");
                    $("input[id=inputPassword]").attr("placeholder", "");
                    $("input[id=inputKeyFile]").attr("placeholder", "");
                    $("input[id=inputOtherSettings]").attr("placeholder", "");
                    break;
                case "FTP":
                    setRequiredStates(["host"], true);
                    $("input[id=inputRemotePath]").attr("placeholder", "/RemotePath/")
                    $("input[id=inputHost]").attr("placeholder", "Remote Host DNS Name or IP");
                    $("input[id=inputPort]").attr("placeholder", "Remote Port, Defaults to 21 for FTP");
                    $("input[id=inputUsername]").attr("placeholder", "FTP Username");
                    $("input[id=inputPassword]").attr("placeholder", "FTP Password");
                    $("input[id=inputKeyFile]").attr("placeholder", "");
                    $("input[id=inputOtherSettings]").attr("placeholder", "connectionTimeout=@(FTPMirror.DefaultConnectionTimeout); passive=@(FTPMirror.DefaultPassive.ToString().ToLower()); activeAddress=@(FTPMirror.DefaultActiveAddress.JavaScriptEncode()); minActivePort=@(FTPMirror.DefaultMinActivePort); maxActivePort=@(FTPMirror.DefaultMaxActivePort); noOpInterval=@(FTPMirror.DefaultNoOpInterval); reconnectDelay=@(FTPMirror.DefaultReconnectDelay)");
                    break;
                case "SFTP":
                    setRequiredStates(["host"], true);
                    $("input[id=inputRemotePath]").attr("placeholder", "/RemotePath/")
                    $("input[id=inputHost]").attr("placeholder", "Remote Host DNS Name or IP");
                    $("input[id=inputPort]").attr("placeholder", "Remote Port, Defaults to 22 for SFTP");
                    $("input[id=inputUsername]").attr("placeholder", "SFTP Username");
                    $("input[id=inputPassword]").attr("placeholder", "SFTP Password or Pass-phrase for Key File");
                    $("input[id=inputKeyFile]").attr("placeholder", "Key File Path");
                    $("input[id=inputOtherSettings]").attr("placeholder", "bufferSize=@(SFTPMirror.DefaultBufferSize); operationTimeout=@(SFTPMirror.DefaultOperationTimeout); keepAliveInterval=@(SFTPMirror.DefaultKeepAliveInterval); reconnectDelay=@(SFTPMirror.DefaultReconnectDelay)");
                    break;
                case "UNC":
                    setRequiredStates(["host"], true);
                    $("input[id=inputRemotePath]").attr("placeholder", "\\RemotePath\\")
                    $("input[id=inputHost]").attr("placeholder", "\\\\MachineName\\ShareName");
                    $("input[id=inputPort]").attr("placeholder", "");
                    $("input[id=inputUsername]").attr("placeholder", "UNC Domain\\Username");
                    $("input[id=inputPassword]").attr("placeholder", "UNC Password");
                    $("input[id=inputKeyFile]").attr("placeholder", "");
                    $("input[id=inputOtherSettings]").attr("placeholder", "");
                    break;
            }

            const placeholder = $("input[id=inputOtherSettings]").attr("placeholder");

            $("input[id=inputOtherSettings]").parent().attr("data-original-title", placeholder);

            if (placeholder.length > 0)
                $("#applyDefaultSettingsButton").show();
            else
                $("#applyDefaultSettingsButton").hide();
        }

        // Watch the connection string dictionary for changes independent of current record
        ko.watch(viewModel.connectionString, { depth: -1 }, function() {
            if (viewModel.loadingConnectionString)
                return;

            // Update connection string applying camel-case key names as defined in default connection string
            const updates = new Dictionary(defaultConnectionString);
            updates.pushAll(viewModel.connectionString.toJSON());
            viewModel.currentRecord().ConnectionString(updates.joinKeyValuePairs());
        });

        $(viewModel).on("newRecord", function (event, newRecord) {
            // Update connection string applying camel-case key names as defined in default connection string
            const updates = new Dictionary(defaultConnectionString);
            newRecord.ConnectionString = updates.joinKeyValuePairs();
        });

        $(viewModel).on("beforeEdit", function(event, observableRecord) {
            // Add connection string reference to current observable record so it can participate in the validation group
            observableRecord._connectionstring = viewModel.connectionString;

            // Set initial required states
            const connectionType = observableRecord.ConnectionType();
            setRequiredStates(["host"], connectionType === "FTP" || connectionType === "SFTP" || connectionType === "UNC");

            observableRecord.ConnectionTypeChange = observableRecord.ConnectionType.subscribe(function () {
                // Reset observable dictionary to default values on connection type change
                const keys = viewModel.connectionString.keys();

                for (let i = 0; i < keys.length; i++) {
                    const key = keys[i];

                    if (defaultConnectionString.containsKey(key))
                        viewModel.connectionString.set(key, defaultConnectionString.get(key));
                    else
                        viewModel.connectionString.remove(key);
                }

                applyConnectionTypeAttrs();
            });
        });

        $(viewModel).on("beforeSave", function (event, observableRecord) {
            // Remove added connection string reference before serialization
            delete observableRecord._connectionstring;

            observableRecord.ConnectionTypeChange.dispose();
        });

        $(viewModel).on("currentRecordChanged", function(event) {
            viewModel.loadingConnectionString = true;

            // Reset observable dictionary to default values on record change
            const keys = viewModel.connectionString.keys();

            for (let i = 0; i < keys.length; i++) {
                const key = keys[i];

                if (defaultConnectionString.containsKey(key))
                    viewModel.connectionString.set(key, defaultConnectionString.get(key));
                else
                    viewModel.connectionString.remove(key);
            }

            // Update observable dictionary with parsed key/value pairs of current connection string
            const currentConnectionString = notNull(viewModel.currentRecord().ConnectionString()).parseKeyValuePairs();
            currentConnectionString.updateObservableDictionary(viewModel.connectionString, true);

            viewModel.isDirty(false);
            viewModel.loadingConnectionString = false;

            setTimeout(applyConnectionTypeAttrs, 750);
        });

        $(viewModel).on("recordSaved", function (event, record, isNew) {
            if (!hubIsConnected)
                return;

            // Notify downloaders of a change in the output mirrors
            serviceHub.sendCommand("reloadconfig");
        });

        function setRequiredStates(valueFieldNames, state) {
            for (let i = 0; i < valueFieldNames.length; i++) {
                viewModel.connectionString.get(valueFieldNames[i]).extend({ required: state });
            }
        }

        $("#addNewEditDialog").on("show.bs.modal", function () {
            applyConnectionTypeAttrs();

            $("#applyDefaultSettingsButton").click(function () {
                const $otherSettings = $("input[id=inputOtherSettings]");
                $otherSettings.val($otherSettings.attr("placeholder"));
                $otherSettings.focus();
            });
        });
    </script>
}