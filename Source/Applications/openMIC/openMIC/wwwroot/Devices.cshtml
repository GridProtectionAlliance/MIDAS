@*******************************************************************************************************
//  Devices.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@* ReSharper disable RedundantUsingDirective *@
@* ReSharper disable UnknownCssClass *@
@using System.Net.Http
@using GSF.Data.Model
@using GSF.Security.Model
@using GSF.Web
@using GSF.Web.Model
@using GSF.Web.Shared
@using GSF.Web.Shared.Model
@using openMIC
@using openMIC.Model
@using RazorEngine.Templating
@using Newtonsoft.Json;
@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <link href="Content/bootstrap-datetimepicker.css" rel="stylesheet">
    <style>
        html, body {
            height: 100%;
        }

        .dateLabel {
            width: 75px;
            text-align: right
        }

        .underField {
            margin-left: 80px
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    string acronym;
    parameters.TryGetValue("Acronym", out acronym);

    Layout = "Layout.cshtml";
    ViewBag.Title = "Devices";
    ViewBag.ShowSearchFilter = true;

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle" },
        new[] { "Acronym", "Acronym", "text-left" },
        new[] { null, "Schedule", "text-center valign-middle" },
        new[] { null, "Tasks", "text-center valign-middle" },
        new[] { "Enabled", "Enabled", "text-center" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.ParentKeys = Model.Global.NodeID.ToString();
}
@helper BodyRows()
{
    <td width="5%" class="text-center valign-middle"><img src="@Resources.Root/Shared/Images/StatusLights/Small/greenlight.png" alt="Enabled" data-bind="visible: Enabled"><img src="@Resources.Root/Shared/Images/StatusLights/Small/disabledlight.png" alt="Disabled" data-bind="visible: !Enabled"></td>
    <td width="65%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="text: Acronym, click: showEditScreen.bind($data, true)"></button></td>
    <td width="20%" class="text-center" data-bind="text: notNull(ConnectionString).parseKeyValuePairs().get('schedule')"></td>
    <td width="5%" class="text-center"> <button type="button" class="btn btn-sm btn-default" data-bind="click: queueNow.bind($data), enable: $parent.dataHubIsConnected">Queue Now</button></td>
    <td width="5%" class="text-center valign-middle"><input type="checkbox" data-bind="checked: Enabled, click: enabledStateChanged.bind($data), enable: $parent.dataHubIsConnected" /></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-6">
        @Raw(dataContext.AddInputField<Device>("Acronym", initialFocus: true, enableHotLinks: false))
        @Raw(dataContext.AddInputField<Device>("Name", enableHotLinks: false))
        @Raw(dataContext.AddInputField<Device>("OriginalSource", enableHotLinks: false)) @* Used to allow custom target folder name when Acronym is not desired *@
        @Raw(dataContext.AddInputField("get('connectionhostname')", false, fieldLabel: "Connection Host Name/IP [ <em>:port</em> ]", fieldID: "inputConnectionHostName", groupDataBinding: "with: $root.connectionString", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('connectionusername')", false, fieldLabel: "Connection User Name", fieldID: "inputConnectionUserName", groupDataBinding: "with: $root.connectionString", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('connectionpassword')", false, inputType: "password", fieldLabel: "Connection Password", fieldID: "inputConnectionPassword", groupDataBinding: "with: $root.connectionString", enableHotLinks: false))
        @Raw(dataContext.AddInputField("get('connectiontimeout')", false, fieldLabel: "Connection Timeout", fieldID: "inputConnectionTimeout", groupDataBinding: "with: $root.connectionString", enableHotLinks: false))
        @Raw(dataContext.AddSelectField<ConnectionProfile>("get('connectionprofileid')", true, "ID", "Name", fieldLabel: "Connection Profile<span class=\"pull-right\">&nbsp;&nbsp;<a href=\"ConnectionProfiles.cshtml\"><small><em>Edit Connection Profiles</em></small></a></span>", fieldID: "selectConnectionProfile", groupDataBinding: "with: $root.connectionString"))
        @Raw(dataContext.AddInputField("get('schedule')", true, fieldLabel: "Schedule Cron<span class=\"pull-right\">&nbsp;&nbsp;<a href=\"#\" data-toggle=\"modal\" data-target=\"#cronHelpDialog\" data-backdrop=\"static\"><small><em>Syntax Help</em></small></a></span>", fieldID: "inputSchedule", groupDataBinding: "with: $root.connectionString", enableHotLinks: false))
        @Raw(dataContext.AddSelectField<Device, VendorDevice>("VendorDeviceID", "ID", "Name"))
    </div>
    <div class="col-md-6">
        <div class="panel panel-default" data-bind="css: {'panel-readonly': $root.recordMode()===RecordMode.View, 'panel-primary': $root.connectionString.get('usedialup')}">
            <div class="panel-heading">
                @Raw(dataContext.AddCheckBoxField("get('usedialup')", "Use Dial-up Connection", "checkUseDialUp", "with: $root.connectionString", customDataBinding: "click: setRequiredStates(['dialupentryname', 'dialupnumber'], get('usedialup'))"))
            </div>
            <div class="panel-body">
                @Raw(dataContext.AddInputField("get('dialupentryname')", true, fieldLabel: "Dial-up RAS Connection Entry Name", fieldID: "inputDialUpRASEntry", groupDataBinding: "with: $root.connectionString", dependencyFieldName: "get('usedialup')", toolTip: "Devices using same connection entries with overlapping schedules will be queued serially", enableHotLinks: false))
                @Raw(dataContext.AddInputField("get('dialupnumber')", true, inputType: "tel", fieldLabel: "Dial-up Phone Number", fieldID: "inputDialUpPhoneNumber", groupDataBinding: "with: $root.connectionString", dependencyFieldName: "get('usedialup')", enableHotLinks: false))
                @Raw(dataContext.AddInputField("get('dialupusername')", false, fieldLabel: "Dial-up User Name", fieldID: "inputDialUpUserName", groupDataBinding: "with: $root.connectionString", dependencyFieldName: "get('usedialup')", enableHotLinks: false))
                @Raw(dataContext.AddInputField("get('dialuppassword')", false, inputType: "password", fieldLabel: "Dial-up Password", fieldID: "inputDialUpPassword", groupDataBinding: "with: $root.connectionString", dependencyFieldName: "get('usedialup')", enableHotLinks: false))
                @Raw(dataContext.AddInputField("get('dialupretries')", false, inputType: "number", fieldLabel: "Maximum Dial-up Retries", fieldID: "inputDialUpRetries", groupDataBinding: "with: $root.connectionString", dependencyFieldName: "get('usedialup')", enableHotLinks: false))
                @Raw(dataContext.AddInputField("get('dialuptimeout')", false, inputType: "number", fieldLabel: "Dial-up Connection Timeout", fieldID: "inputDialUpTimeout", groupDataBinding: "with: $root.connectionString", dependencyFieldName: "get('usedialup')", enableHotLinks: false))
            </div>
        </div>
        @Raw(dataContext.AddSelectField<Device, Company>("CompanyID", "ID", "Name"))
        @Raw(dataContext.AddCheckBoxField("get('logconnectionmessages')", "Log Detailed Connection Messages", "checkLogConnectionMessages", "with: $root.connectionString", toolTip: "When enabled, logs detailed connection level messages, e.g.,  FTP commands and responses"))
        @Raw(dataContext.AddCheckBoxField<Device>("Enabled"))
    </div>
    <div class="col-md-12">
        <div class="form-group">
            <label for="textConnectionString">Connection String:</label>
            <textarea class="form-control" rows="2" data-bind="text: ConnectionString" id="textConnectionString" readonly></textarea>
        </div>
    </div>
}
@Include("CronHelpDialog.cshtml", dataContext, typeof(DataContext))
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
<div id="queueParamsDialog" class="modal fade" role="dialog">
    <div class="modal-vertical-align-container">
        <div class="modal-dialog modal-md modal-vertical-align-center">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Queue Download Processing</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div style="margin-left: 25px">
                            Leave start / end time blank to immediately queue normal download at highest priority.<br/>
                            When start / end time is set, download will be constrained to specified time range.
                        </div>
                        <br/>
                        <form class="form-inline" role="form" style="margin-left: 50px">
                            <div class="form-group form-group-sm">
                                <label for="StartTime" class="dateLabel">Start&nbsp;Time:</label>
                                <div class="input-group date" id="StartTime">
                                    <input type="datetime" class="form-control" placeholder="Select start time...">
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                </div>
                                <div id="StartTimeValidationMessage" class="underField" style="display: none">
                                    <em class="validationMessage small">Start time must be less than end time.</em>
                                </div>
                            </div>
                            <br/><br/>
                            <div class="form-group form-group-sm">
                                <label for="EndTime" class="dateLabel">End&nbsp;Time:</label>
                                <div class="input-group date" id="EndTime">
                                    <input type="datetime" class="form-control" placeholder="Select end time...">
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                </div>
                                <div id="EndTimeValidationMessage" class="underField" style="display: none">
                                    <em class="validationMessage small">End time must be greater than start time.</em>
                                </div>
                            </div>
                            <br/><br/>
                            <div class="checkbox underField">
                                <label for="QueueLocal"><input type="checkbox" id="QueueLocal" > Queue to Current Machine (@request.RequestUri.Host)</label>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="queueDownloadButton">Queue</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="@Resources.Root/Shared/Scripts/moment.js"></script>
    <script src="Scripts/bootstrap-datetimepicker.js"></script>
    <script src="Scripts/dateFormat.js"></script>

    <script>
        "use strict";

        $(viewModel).one("pageRecordsQueried", function () {
            const acronym = "@Raw(acronym)";

            if (notNull(acronym)) {
                $(viewModel).one("pageRecordsQueried", function (event, records) {
                    if (records && records.length > 0) {
                        const record = records[0];
                        showEditScreen(true, record);
                    }
                });

                $("#searchFilter").val(acronym);
                viewModel.filterText = acronym;
                viewModel.queryPageRecords();
            }
        });

        const MomentDateTimeFormat = dateFormat.convert(DateTimeFormat, dateFormat.dotnet, dateFormat.moment);

        @Raw(dataContext.RenderViewModelConfiguration<Device, DataHub>(ViewBag, "Acronym", null, Model.Global.NodeID))

        var downloaderProtocolID = 0;
        var modbusProtocolID = 0;
        var defaultIGridProfileID = 0;
        var activeRecord = null;

        // Define default connection string keys needed for binding
        const defaultConnectionString = new Dictionary();

        defaultConnectionString.set("connectionHostName", "");
        defaultConnectionString.set("connectionUserName", "@Raw(Model.Global.DefaultFTPUserName.JavaScriptEncode())");
        defaultConnectionString.set("connectionPassword", "@Raw(Model.Global.DefaultFTPPassword.JavaScriptEncode())");
        defaultConnectionString.set("connectionProfileID", "");
        defaultConnectionString.set("schedule", "* * * * *");
        defaultConnectionString.set("useDialUp", false);
        defaultConnectionString.set("dialUpEntryName", "");
        defaultConnectionString.set("dialUpNumber", "");
        defaultConnectionString.set("dialUpUserName", "");
        defaultConnectionString.set("dialUpPassword", "");
        defaultConnectionString.set("dialUpRetries", @Model.Global.DefaultDialUpRetries);
        defaultConnectionString.set("dialUpTimeout", @Model.Global.DefaultDialUpTimeout);
        defaultConnectionString.set("connectionTimeout", "30000");
        defaultConnectionString.set("logConnectionMessages", false);

        // Create an observable key/value pair connection string dictionary
        viewModel.connectionString = defaultConnectionString.toObservableDictionary(true);
        viewModel.loadingConnectionString = false;

        // Watch the connection string dictionary for changes independent of current record
        ko.watch(viewModel.connectionString, { depth: -1 }, function() {
            if (viewModel.loadingConnectionString)
                return;

            // Update connection string applying camel-case key names as defined in default connection string
            const updates = new Dictionary(defaultConnectionString);
            updates.pushAll(viewModel.connectionString.toJSON());
            viewModel.currentRecord().ConnectionString(updates.joinKeyValuePairs());
        });

        $(viewModel).on("beforeEdit", function(event, observableRecord) {
            // Add connection string reference to current observable record so it can participate in the validation group
            observableRecord._connectionstring = viewModel.connectionString;
        });

        $(viewModel).on("beforeSave", function(event, observableRecord) {
            // Remove added connection string reference before serialization
            delete observableRecord._connectionstring;
        });

        $(viewModel).on("currentRecordChanged", function(event) {
            viewModel.loadingConnectionString = true;

            // Reset observable dictionary to default values on record change
            const keys = viewModel.connectionString.keys();

            for (let i = 0; i < keys.length; i++) {
                const key = keys[i];

                if (defaultConnectionString.containsKey(key))
                    viewModel.connectionString.set(key, defaultConnectionString.get(key));
                else
                    viewModel.connectionString.remove(key);
            }

            // Update observable dictionary with parsed key/value pairs of current connection string
            const currentConnectionString = notNull(viewModel.currentRecord().ConnectionString()).parseKeyValuePairs();
            currentConnectionString.updateObservableDictionary(viewModel.connectionString, true);

            viewModel.isDirty(false);
            viewModel.loadingConnectionString = false;
        });

        $(viewModel).on("recordDeleted", function(event, record) {
            if (hubIsConnected)
                serviceHub.sendCommand("reloadconfig");
        });

        $(viewModel).on("recordSaved", function(event, record, isNew) {
            if (!hubIsConnected)
                return;

            if (record.Enabled)
                serviceHub.sendCommand(`initialize ${record.Acronym}`);
            else
                serviceHub.sendCommand("reloadconfig");
        });

        $(window).on("hubConnected", function() {
            if (downloaderProtocolID === 0) {
                dataHub.getDownloaderProtocolID().done(function(protocolID) {
                    downloaderProtocolID = protocolID;
                });
            }

            if (modbusProtocolID === 0) {
                dataHub.getModbusProtocolID().done(function(protocolID) {
                    modbusProtocolID = protocolID;
                });
            }

            if (defaultIGridProfileID === 0) {
                dataHub.getDefaultIGridProfileID().done(function(profileID) {
                    defaultIGridProfileID = profileID;
                });
            }
        });

        function updateSchedule(schedule) {
            if (viewModel.recordMode() !== RecordMode.View)
                viewModel.connectionString.get("schedule")(schedule);
        }

        function setRequiredStates(valueFieldNames, state) {
            for (let i = 0; i < valueFieldNames.length; i++) {
                viewModel.connectionString.get(valueFieldNames[i]).extend({ required: state });
            }
        }

        $("#addNewEditDialog").on("show.bs.modal", function () {
            $("#checkUseDialUp").parent().parent().css("margin", 0);
        });

        function showEditScreen(readOnly, record) {
            if (record.ProtocolID === modbusProtocolID) {
                window.location.href = `/ModbusConfig.cshtml?DeviceID=${record.ID}`;
            }
            else {
                // Parse connection string
                const connectionString = new Dictionary(record.ConnectionString.parseKeyValuePairs());

                if (parseInt(connectionString.get("connectionProfileID")) === defaultIGridProfileID) {
                    window.location.href = `/IGridConfig.cshtml?DeviceID=${record.ID}`;
                }
                else {
                    function showPageRecord() {
                        if (readOnly)
                            viewModel.viewPageRecord(record);
                        else
                            viewModel.editPageRecord(record);
                    }

                    // For link click from acronym, readonly will be true
                    if (hubIsConnected && readOnly) {
                        dataHub.getDeviceVendor(record.VendorDeviceID).done(function (vendor) {
                            if (vendor.Acronym.toUpperCase() === "DRANETZ")
                                window.location.href = `/DranetzConfig.cshtml?DeviceID=${record.ID}`;
                            else if (vendor.Acronym.toUpperCase() === "POWERSIDE")
                                window.location.href = `/PQubeConfig.cshtml?DeviceID=${record.ID}`;
                            else
                                showPageRecord();
                            })
                        .fail(function (error) {
                            showErrorMessage(`Failed to query device vendor: ${error}`, -1, true);
                            showPageRecord();
                        });
                    }
                    else {
                        showPageRecord();
                    }
                }
            }
        }

        function refreshEnabledState(record) {
            if (!hubIsConnected)
                return;

            if (record.Enabled)
                serviceHub.sendCommand(`initialize ${record.Acronym}`);
            else
                serviceHub.sendCommand("reloadconfig");
        }

        function enabledStateChanged(record) {
            if (hubIsConnected) {
                record.Enable = !record.Enable;

                dataHub.updateDevice(record).done(function() {
                    viewModel.queryPageRecords();
                    refreshEnabledState(record);
                });
            }
        }

        function getDateTimePicker(textBox) {
            return textBox.data("DateTimePicker");
        }

        function getMoment(textBox) {
            const picker = getDateTimePicker(textBox);
            return picker == null ? null : picker.date();
        }

        function getDate(textBox) {
            const moment = getMoment(textBox);
            return moment == null ? null : moment.toDate();
        }

        function setDate(textBox, value) {
            const picker = getDateTimePicker(textBox);

            if (picker != null)
                picker.date(value); // Can be string, Date, moment, or null
        }

        const options = {
            format: MomentDateTimeFormat,
            useCurrent: false,
            showTodayButton: true,
            showClear: true,
            showClose: true,
            keepOpen: false
        };

        $("#StartTime").datetimepicker(options);
        $("#EndTime").datetimepicker(options);

        $("#StartTime").on("dp.change", validateDateTimes);
        $("#EndTime").on("dp.change", validateDateTimes);

        $("#StartTime").on("dp.show", function () {
            if (isEmpty(getDate($("#StartTime"))))
                setDate($("#StartTime"), moment().subtract(20, 'days').startOf('day'));
        });

        $("#EndTime").on("dp.show", function () {
            if (isEmpty(getDate($("#EndTime"))))
                setDate($("#EndTime"), moment().subtract(10, 'days').startOf('day'));
        });

        $("#queueParamsDialog").on("show.bs.modal", function () {
            setDate($("#StartTime"), null);
            setDate($("#EndTime"), null);
        });

        function queueNow(record) {
            if (!hubIsConnected)
                return;

            activeRecord = record;
            $("#queueParamsDialog").modal({ backdrop: "static" });
        }

        function validateDateTimes() {
            const startTime = getDate($("#StartTime"));
            const endTime = getDate($("#EndTime"));
            var isValid = true;

            if (isEmpty(startTime) || isEmpty(endTime)) {
                $("#QueueLocal")[0].checked = false;
                $("#QueueLocal").enable();
            } else {
                isValid = startTime < endTime;
                $("#QueueLocal")[0].checked = true;
                $("#QueueLocal").disable();
            }

            if (isValid) {
                $("#StartTimeValidationMessage").hide();
                $("#EndTimeValidationMessage").hide();
                $("#queueDownloadButton").enable();
            } else {
                $("#StartTimeValidationMessage").show();
                $("#EndTimeValidationMessage").show();
                $("#queueDownloadButton").disable();
            }
        }

        $("#queueDownloadButton").click(function () {
            const startTime = getDate($("#StartTime"));
            const endTime = getDate($("#EndTime"));
            const queueLocal = $("#QueueLocal").is(":checked");

            $("#queueParamsDialog").modal("hide");

            if (isEmpty(startTime) || isEmpty(endTime)) {
                if (queueLocal) {
                    serviceHub.sendCommand(String.format("INVOKE {0} QueueTasksLocally", activeRecord.Acronym)).done(function () {
                        window.location.href = "/Status.cshtml";
                    });
                }
                else {
                    serviceHub.sendCommand(String.format("INVOKE {0} QueueTasks", activeRecord.Acronym)).done(function () {
                        window.location.href = "/Status.cshtml";
                    });
                }
            }
            else {
                const startTimestamp = startTime.formatDate(DateTimeFormat);
                const endTimestamp = endTime.formatDate(DateTimeFormat);

                serviceHub.sendCommand(String.format("INVOKE {0} QueueTasksByDateRange {1} {2}", activeRecord.Acronym, startTimestamp, endTimestamp)).done(function () {
                    window.location.href = "/Status.cshtml";
                });
            }
        });
    </script>
}