@*******************************************************************************************************
//  DranetzConfig.cshtml - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  05/19/2021 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Net.Http
@using System.Threading
@using GSF.Identity
@using GSF.Security
@using GSF.Web
@using GSF.Web.Model
@using GSF.Web.Shared
@using openMIC.Model
@* ReSharper disable Html.PathError *@
@* ReSharper disable UnknownCssClass *@
@* ReSharper disable CssBrowserCompatibility *@
@inherits ExtendedTemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.HidePageTitle = true;
    ViewBag.Title = "Manage Configuration";

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();
    string parameter;
    int deviceID;

    if (!parameters.TryGetValue("DeviceID", out parameter) || !int.TryParse(parameter, out deviceID)) {
        deviceID = 0;
    }

    bool userIsEditor = UserIsEditor();
}
@section StyleSheets {
    <link href="@Resources.Root/Shared/Content/jquery-ui.css" rel="stylesheet">
    <style>
        html, body {
            height: 100%;
            min-width: 800px;
        }

        body.wait, body.wait * {
            cursor: wait !important;
        }

        .tooltip-inner {
            white-space: pre;
            min-width: 100px;
            max-width: 100%;
        }

        .btn-group-vertical > button {
            margin-bottom: 2px;
        }

        th.pad-right {
            padding-right: 8px;
            white-space: nowrap;
            width: 50%;
        }

        th.header {
            text-align: center;
            font-size: 18px;
            font-weight: bolder;
            padding-bottom: 5px;
            width: 100%;
        }

        th.header-section-row {
            text-align: center;
            font-size: 18px;
            font-weight: bolder;
            padding-bottom: 5px;
            padding-top: 10px;
            width: 100%;
        }

        tr.selected {
            background-color: #FFCF8B
        }

        .row-hover-highlight tr:hover {
            background-color: lightgray
        }

        div.header {
            border-bottom: 4px solid;
        }

        div.tab-section {
            overflow: auto;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        table.section-elements {
            border-spacing: 0 4px;
            border-collapse: separate;
            width: 100%;
        }

        .list-bank {
            margin-bottom: 10px;
        }

        th.bank-header {
            padding-bottom: 0;
        }

        th.bank-footer {
            padding-top: 0;
        }

        tr.bank-group {
            border: 1px solid;
        }

        td.bank-group {
            padding: 2px;
        }

        .btn-bank {
            padding-top: 0;
            padding-bottom: 0;
            padding-left: 5px;
        }

        /* Collapsable button style */
        .btn-collapsable.btn {
            color: #606060;
            font-family: "Glyphicons Halflings";
            font-size: 8pt;
            position: relative;
            top: -9px;
            right: -14px;
            padding: 0 2px 2px 2px;
            height: 18px;
            float: right !important;
        }

        /* Collapsable button icon when content is shown - arrow down */
        .btn-collapsable.btn:after {
            content: "\e114";
        }

        /* Collapsable button icon when content is hidden - arrow right */
        .btn-collapsable.btn.collapsed:after {
            content: "\e080";
        }

        #header-collapse {
            left: 0;
            top: 10px;
            margin-bottom: -10px;
            visibility: hidden;
        }

        .ui-tabs .ui-tabs-nav li a {
            font-size: 9.6pt !important;
        }

        input[type=checkbox] {
            margin-top: 8px;
            margin-bottom: 8px;
        }

        input[type="checkbox"]:focus {
            outline-offset: 2px;
            outline-style: solid;
            outline-color: #66afe9;
            outline-width: thin;
            box-shadow: -1px 0 2px 2px #9ecaed;
        }

        input:out-of-range {
            background-color: #ff0000;
            background-color: rgba(255, 0, 0, 0.25);
        }

        .graph-data-img {
            width: 18px;
            height: 14px;
            margin-top: -5px;
            margin-left: 5px;
        }

        #hardRestartLabel {
            font-weight: normal;
            font-size: 12px;
            margin-left: 25px;
            margin-top: -4px;
        }

        .page-logo {
            margin-bottom: -25px;
            margin-top: 1px;
        }

        /*
            The following micro-adjustments for the Bootstrap container class
            allow the tab sections to remain at maximum widths for longer
            periods to reduce tab row wrapping
        */
        @@media screen and (min-width: 768px) {
            .container {
                width: 800px;
            }
        }

        @@media screen and (min-width: 900px) {
            .container {
                width: 885px;
            }
        }

        @@media screen and (min-width: 975px) {
            .container {
                width: 950px;
            }
        }

        @@media screen and (min-width: 1000px) {
            .container {
                width: 975px;
            }
        }

        @@media screen and (min-width: 1100px) {
            .container {
                width: 1075px;
            }
        }

        @@media screen and (min-width: 1150px) {
            .container {
                width: 1125px;
            }
        }

        @@media screen and (min-width: 1200px) {
            .container {
                width: 1170px;
            }
        }
    </style>
}
@functions {
    public string GetCurrentUserID()
    {
        if (Thread.CurrentPrincipal.Identity == null)
            return UserInfo.CurrentUserID;

        return Thread.CurrentPrincipal.Identity.Name;
    }

    // This function simply limits access to UI elements that the user does not have access to, server-side
    // functions will further validate user rights even if UI restriction was somehow bypassed
    public bool UserIsEditor()
    {
        SecurityPrincipal securityPrincipal = ViewBag.SecurityPrincipal as SecurityPrincipal;

        if ((object)securityPrincipal == null)
            return false;

        return securityPrincipal.IsInRole("Administrator") || securityPrincipal.IsInRole("Editor");
    }
}
<div style="display: none" search-header></div>
<h3 style="margin-top: -10px;">@ViewBag.Title <span class="label label-info" id="editDeviceName"></span> <img class="page-logo pull-right" alt="Dranetz" src="Images/Dranetz.png" /></h3>
<hr class="quarter-break" />
<div id="contentWell" class="well well-dynamic-content" content-fill-height>
    <div id="responsiveTableDiv" class="table-responsive" style="display: none; border: none">
        <table id="headerArea" width="100%" style="margin-top: -10px">
            <tr>
                <td colspan="2">
                    <button id="header-collapse" type="button" class="btn btn-xs btn-collapsable" data-toggle="collapse" data-target="#topRow" aria-expanded="true"></button>
                </td>
            </tr>
            <tr id="topRow" aria-expanded="true" class="collapse in">
                <td width="50%" style="vertical-align: top; padding-right: 15px; min-width: 400px">
                    <table width="95%">
                        <tr>
                            <th class="header" colspan="2"><div class="header">System</div></th>
                        </tr>
                        <tr>
                            <th class="text-center nowrap" style="padding-top: 2px; padding-bottom: 5px" colspan="2" data-bind="text: versionInfo" />
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Site Name:</th>
                            <td class="text-left" data-bind="text: siteName" />
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Serial Number:</th>
                            <td class="text-left" data-bind="text: serialNumber" />
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Module Firmware:</th>
                            <td class="text-left nowrap" data-bind="text: `Comm. ${commFirmware()} / Host ${hostFirmware()}`" />
                        </tr>
                        <tr>
                            <th class="text-right pad-right">System Health:</th>
                            <td class="text-left nowrap" data-bind="text: `${systemHealth()} / DB ${databaseHealth()}`" />
                        </tr>
                        <tr>
                            <th class="text-right pad-right">IP Address:</th>
                            <td class="text-left" data-bind="text: ipAddress" />
                        </tr>
                        <tr>
                            <th class="text-right pad-right">GPS:</th>
                            <td class="text-left nowrap" data-bind="text: `${gpsInstalled() ? '' : 'not '} installed / ${gpsSatellites()} satellites`" />
                        </tr>
                        <tr>
                            <th class="text-right pad-right" style="vertical-align: top">Device Time:</th>
                            <td class="text-left nowrap" data-bind="html: time" />
                        </tr>
                        <tr>
                            <th class="text-right pad-right" style="vertical-align: top">Time Error:</th>
                            <td class="text-left nowrap" data-bind="html: timeErrorText, attr: { title: `Total error: ${timeError().toFixed(2)} seconds` }" />
                        </tr>
                    </table>
                </td>
                <td width="50%" style="vertical-align: top">
                    <table width="95%">
                        <tr>
                            <th class="header"><div class="header">Input Modules</div></th>
                        </tr>
                        <tr>
                            <td>
                                <table class="table table-condensed table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th class="text-center">ID</th>
                                            <th class="text-center">Model&nbsp;Number</th>
                                            <th class="text-center">Firmware</th>
                                            <th class="text-center">Changed?</th>
                                        </tr>
                                    </thead>
                                    <tbody data-bind="foreach: modules">
                                        <tr id="moduleRow" style="visibility: hidden">
                                            <td width="5%" class="text-center valign-middle" data-bind="text: $data['@@id']" />
                                            <td width="75%" class="text-center valign-middle nowrap"><span data-bind="text: $data['@@model']"></span></td>
                                            <td width="15%" class="text-center valign-middle"><span data-bind="text: $data['@@firmware_version']"></span></td>
                                            <td width="5%" class="text-center valign-middle"><span data-bind="text: $data['@@module_changed']"></span></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr>
                <td colspan="2" style="padding-top: 5px">
                    <table width="50%" style="margin: auto">
                        <tr>
                            <th class="header"><div class="header">Analyzers</div></th>
                        </tr>
                        <tr>
                            <td>
                                <table class="table table-condensed row-hover-highlight">
                                    <thead>
                                        <tr>
                                            <th class="text-center">Name</th>
                                            <th class="text-center">Type</th>
                                            <th class="text-center">Monitoring</th>
                                        </tr>
                                    </thead>
                                    <tbody data-bind="foreach: analyzers">
                                        <tr id="analyzerRow" style="visibility: hidden" data-bind="css: { selected: isSelected }">
                                            <td width="80%" class="text-center valign-middle nowrap"><btn type="button" class="btn btn-link" style="padding: 0" data-bind="text: $data['@@name'], click: loadAnalyzerConfig.bind($data)" /></td>
                                            <td width="10%" class="text-center valign-middle align-left nowrap" style="text-align: left"><span data-bind="text: analyzerTypeName"></span><btn type="button" class="btn btn-link" style="padding: 0" data-bind="click: openGraphDataWindow.bind($data), visible: analyzerType() < 3, attr: {title: 'Show ' + $data['@@name']() + ' real-time values'}" show-data-button><img src="Images/GraphData.png" class="graph-data-img" alt="Graph Data" /></btn></td>
                                            <td width="10%" class="text-center valign-middle"><span data-bind="text: montitoringStatus"></span></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
        <div id="busyDataBlock" style="display: none">
            <span id="busyDataLabel">Loading</span>&nbsp;&nbsp;<span class="glyphicon glyphicon-refresh glyphicon-spin"></span>
        </div>
        <div class="btn-group-vertical pull-left" role="group" style="margin-top: -100px; width: 130px">
            <button id="restartDeviceButton" type="button" class="btn btn-sm btn-default pull-left" data-bind="enable: canRestart" hub-dependent>
                <span class="glyphicon glyphicon-off"></span>&nbsp;&nbsp;Restart&nbsp;Device&nbsp;
            </button>
            <div class="pull-left">
                <label id="hardRestartLabel"><input id="hardRestart" type="checkbox">&nbsp;Hard restart</label>
            </div>
        </div>
        <div class="btn-group-vertical pull-right" role="group" style="margin-top: -100px; width: 130px">
            <button id="saveChangesButton" type="button" class="btn btn-sm btn-primary pull-right" data-bind="enable: canSave" hub-dependent>
                <span class="glyphicon glyphicon-floppy-save"></span>&nbsp;&nbsp;Save&nbsp;Changes
            </button>
            <button id="exportConfigButton" type="button" class="btn btn-sm btn-default pull-right" data-bind="enable: canExport" onclick="showExportConfigFileNameDialog()">
                <span class="glyphicon glyphicon-save-file"></span>&nbsp;&nbsp;Export&nbsp;Config
            </button>
            <div class="well well-sm floating-form" id="exportConfigFileNameDialog" style="z-index: 1000; margin-left: -100px; margin-top: 65px; border: 1px solid black">
                <form class="form-inline" role="form">
                    <div class="form-group form-group-sm">
                        <button type="button" class="close" onclick="$('#exportConfigFileNameDialog').hide()" style="margin-top: -5px; margin-left: 8px">&times;</button>
                        <label for="exportConfigFileName">Config file name:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="exportConfigFileName" placeholder="File name..." />
                            <span class="input-group-btn">
                                <button id="exportConfigFile" type="button" class="btn btn-default btn-sm" style="margin-right: -3px; font-weight: bold">Save</button>
                            </span>
                        </div>
                    </div>
                </form>
            </div>
            <a href="#" id="exportConfigFileLink" target="_blank" style="display: none"></a>
            <button id="importConfigButton" type="button" class="btn btn-sm btn-default pull-right" data-bind="enable: canImport" onclick="showImportConfigFileNameDialog()">
                <span class="glyphicon glyphicon-open-file"></span>&nbsp;&nbsp;Import&nbsp;Config
            </button>
            <input id="importConfigFileName" type="file" accept="text/json" style="position: fixed; top: -100em" onchange="importConfigFile(event)">
        </div>
        <div id="tabs"></div>
    </div>
    <h3 id="noDeviceDataMessage" style="display: none; color: red">
        No device data could be loaded for device with <code>ID=@deviceID</code>
    </h3>
</div>
<hr id="view-spacer" class="thick-spacer" style="margin-top: -10px; margin-bottom: 8px" />
<div class="panel panel-default">
    <div class="panel-heading" style="height: 30px; padding-top: 5px">
        <label>Analyzer&nbsp;Configuration</label>
        <button type="button" class="btn btn-xs btn-collapsable collapsed" style="top: 0; right: -10px" data-toggle="collapse" data-target="#analyzerConfiguration"></button>
    </div>
    <div class="panel-body collapse" style="padding: 2px; margin-bottom: -10px" id="analyzerConfiguration">
        <pre data-bind="text: JSON.stringify(currentAnalyzerConfig(), null, 4)"></pre>
    </div>
</div>
<div id="graphDataWindow" class="modal modal-wide fade" role="dialog" style="max-width: 1000px; margin: 0 auto">
    <div class="modal-vertical-align-container">
        <div class="modal-dialog modal-md modal-vertical-align-center">
            <div class="modal-content">
                <div class="modal-body">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <iframe style="border: none" id="graphDataFrame"></iframe>
                    <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="@Resources.Root/Shared/Scripts/knockout.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.mapping.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.validation.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.reactor.js"></script>
    <script src="@Resources.Root/Shared/Scripts/gsf.web.knockout.js"></script>

    <script>
        "use strict";

        var viewModel = null;
        const deviceID = @deviceID;

        let shiftIsDown = false;

        $(document).keydown(function (e) {
            shiftIsDown = e.keyCode === 16;
        });

        $(document).keyup(function (e) {
            shiftIsDown = false;
        });

        const analyzerTypes = {
            PQDataNode:            { index: 0, name: "61000 PQ DataNode" },
            VoltageDataNode:       { index: 1, name: "61000 Voltage DataNode" },
            CurrentDataNode:       { index: 2, name: "61000 Current DataNode" },
            VoltageTransducerNode: { index: 3, name: "61000 Voltage Transducer Node" },
            CurrentTransducerNode: { index: 4, name: "61000 Current Transducer Node" },
            DigitalInputDataNode:  { index: 5, name: "61000 Digital Input DataNode" },
            DigitalOutputDataNode: { index: 6, name: "61000 Digital Output DataNode" }
        };

        const analyzerTypeKeys = Object.keys(analyzerTypes);

        // One section defined per analyzer type
        const sections = [
        {
            // [0] PQ Data Node Analyzer Sections
            InputConfiguration: { index: 0, name: "Input Configuration" },
            RMSVariations:      { index: 1, name: "RMS Variations" },
            Transients:         { index: 2, name: "Transients" },
            WaveformCapture:    { index: 3, name: "Waveform Capture" },
            Power:              { index: 4, name: "Power" },
            EnergyAndDemand:    { index: 5, name: "Energy and Demand" },
            Harmonics:          { index: 6, name: "Harmonics" },
            Flicker:            { index: 7, name: "Flicker" },
            CrossTriggering:    { index: 8, name: "Cross-Triggering" }
        },
        {
            // [1] Voltage Data Node Analyzer Sections
            InputConfiguration: { index: 0, name: "Input Configuration" },
            RMSVariations:      { index: 1, name: "RMS Variations" },
            Transients:         { index: 2, name: "Transients" },
            WaveformCapture:    { index: 3, name: "Waveform Capture" },
            Power:              { index: 4, name: "Voltage" },
            Harmonics:          { index: 5, name: "Harmonics" },
            Flicker:            { index: 6, name: "Flicker" },
            CrossTriggering:    { index: 7, name: "Cross-Triggering" }
        },
        {
            // [2] Current Data Node Analyzer Sections
            InputConfiguration: { index: 0, name: "Input Configuration" },
            RMSVariations:      { index: 1, name: "RMS Variations" },
            Transients:         { index: 2, name: "Transients" },
            WaveformCapture:    { index: 3, name: "Waveform Capture" },
            Power:              { index: 4, name: "Current" },
            EnergyAndDemand:    { index: 5, name: "Demand" },
            Harmonics:          { index: 6, name: "Harmonics" },
            CrossTriggering:    { index: 7, name: "Cross-Triggering" }
        },
        {
            // [3] Voltage Transducer Analyzer Sections
            InputConfiguration: { index: 0, name: "Input Configuration" }
            // Sections TBD...
        },
        {
            // [4] Current Transducer Analyzer Sections
            InputConfiguration: { index: 0, name: "Input Configuration" }
            // Sections TBD...
        },
        {
            // [5] Digital Input Analyzer Sections
            DigitalInputConfiguration:  { index: 0, name: "Input Configuration" },
            DigitalCrossTriggering:     { index: 1, name: "Cross-Triggering" }
        },
        {
            // [6] Digital Output Analyzer Sections
            DigitalOutputConfiguration: { index: 0, name: "Output Configuration" },
            DigitalCrossTriggering:     { index: 1, name: "Cross-Triggering" }
        }];

        const sectionKeys = [
            Object.keys(sections[analyzerTypes.PQDataNode.index]),
            Object.keys(sections[analyzerTypes.VoltageDataNode.index]),
            Object.keys(sections[analyzerTypes.CurrentDataNode.index]),
            Object.keys(sections[analyzerTypes.VoltageTransducerNode.index]),
            Object.keys(sections[analyzerTypes.CurrentTransducerNode.index]),
            Object.keys(sections[analyzerTypes.DigitalInputDataNode.index]),
            Object.keys(sections[analyzerTypes.DigitalOutputDataNode.index])
        ];

        const wiringConfig = {
            Config0: { index: 0, name: "Single phase", type: "Single" },
            Config1: { index: 1, name: "Split phase", type: "Split" },
            Config2: { index: 2, name: "Delta", type: "Delta" },
            Config3: { index: 3, name: "Wye", type: "Wye" },
            // Misorder intentional, Generic appears before Delta 2 Watt Meter
            Config5: { index: 4, name: "Generic", type: "Generic" },
            Config4: { index: 5, name: "Delta 2 Watt Meter", type: "Delta" },
            Config6: { index: 6, name: "Wye 2.5 element, no B", type: "Wye"},
            Config7: { index: 7, name: "Wye 2.5 element, no C", type: "Wye" }
        };

        function getWiringConfig(value) {
            const key = `Config${value}`;

            if (wiringConfig.hasOwnProperty(key))
                return wiringConfig[key];

            return { name: "Undefined", type: "Undefined" };
        }

        function DeviceViewModel() {
            const self = this;

            // Observable fields
            self.versionInfo = ko.observable("Encore Series Dranetz-BMI");
            self.siteName = ko.observable("querying...");
            self.serialNumber = ko.observable("");
            self.systemHealth = ko.observable("");
            self.databaseHealth = ko.observable("");
            self.hostFirmware = ko.observable("");
            self.commFirmware = ko.observable("");
            self.gpsInstalled = ko.observable(false);
            self.gpsSatellites = ko.observable(0);
            self.ipAddress = ko.observable("");
            self.time = ko.observable("");
            self.timeError = ko.observable(0.0);
            self.timeErrorText = ko.observable("");
            self.modules = ko.observableArray();
            self.analyzers = ko.observableArray();
            self.currentConfigID = ko.observable(-1);
            self.currentAnalyzerConfig = ko.observable("");
            self.errors = ko.validation.group(self);

            // Standard fields
            self.vNom = undefined;
            self.iNom = undefined;

            // Internal fields
            self._dataHubIsConnected = ko.observable(false);
            self._isDirty = ko.observable(false);
            self._isSaving = ko.observable(false);
            self._currentAnalyzerType = ko.observable(analyzerTypes.PQDataNode.index);
            self._currentWiringConfig = ko.observable(0);

            // Properties
            self.dataHubIsConnected = ko.pureComputed({
                read: self._dataHubIsConnected,
                write: function (value) {
                    if (value === undefined)
                        value = false;

                    self._dataHubIsConnected(value);
                },
                owner: self
            });

            self.selectedAnalyzer = ko.pureComputed({
                read: function () {
                    let selectedAnalyzer = undefined;

                    self.analyzers().every(function (analyzer) {
                        if (analyzer.isSelected()) {
                            selectedAnalyzer = analyzer;
                            return false; // break
                        }

                        return true;
                    });

                    return selectedAnalyzer;
                },
                owner: self
            });

            self.canSave = ko.pureComputed({
                read: function () {
                    return @(userIsEditor.ToString().ToLower()) &&
                        self.currentConfigID() > -1 &&
                        self.currentAnalyzerConfig().commandresult &&
                        self.isDirty() &&
                        !self.isSaving() &&
                        self.dataHubIsConnected();
                },
                owner: self
            });

            self.canExport = ko.pureComputed({
                read: function () {
                    return self.currentConfigID() > -1 &&
                        self.currentAnalyzerConfig().commandresult &&
                        !self.isSaving() &&
                        self.dataHubIsConnected();
                },
                owner: self
            });

            self.canImport = ko.pureComputed({
                read: function () {
                    return !self.isSaving() &&
                        self.dataHubIsConnected();
                },
                owner: self
            });

            self.canRestart = ko.pureComputed({
                read: function () {
                    return @(userIsEditor.ToString().ToLower()) &&
                        !self.isSaving() &&
                        self.dataHubIsConnected();
                },
                owner: self
            });

            self.isDirty = ko.pureComputed({
                read: self._isDirty,
                write: function (value) {
                    self._isDirty(value);
                },
                owner: self
            });

            self.isSaving = ko.pureComputed({
                read: self._isSaving,
                owner: self
            });

            self.currentAnalyzerType = ko.pureComputed({
                read: self._currentAnalyzerType,
                write: function (value) {
                    self._currentAnalyzerType(value);
                    self.analyzers.valueHasMutated();
                },
                owner: self
            });

            self.currentWiringConfig = ko.pureComputed({
                read: function () {
                    return getWiringConfig(self._currentWiringConfig());
                },
                owner: self
            });

            // Methods

            self.setWiringConfigValue = function (value) {
                self._currentWiringConfig(parseInt(value, 10));
            }

            self.queryModules = function () {
                if (!self.dataHubIsConnected())
                    return $.Deferred().resolve().promise();

                $("[id=moduleRow]").css("visibility", "hidden");
                $("[id=analyzerRow]").css("visibility", "hidden");
                self.modules.removeAll();

                return dataHub.getInstanceStatus(deviceID).done(function (statusResult) {
                    const status = JSON.parse(statusResult);

                    self.serialNumber(status.commandresult.characteristics["@@serial_number"]);
                    self.systemHealth(status.commandresult.characteristics["@@system_health"]);
                    self.databaseHealth(status.commandresult.characteristics["@@database_health"]);
                    self.hostFirmware(status.commandresult.characteristics["@@cs_firmware_version"]);
                    self.commFirmware(status.commandresult.characteristics["@@host_firmware_version"]);
                    self.gpsInstalled(parseInt(status.commandresult.gps_status["@@installed"], 10) !== 0);
                    self.gpsSatellites(status.commandresult.gps_status["@@gps_satellites"]);

                    var observableModules = [];

                    status.commandresult.inputs.list.item.forEach(function (module) {
                        const observableModule = ko.mapping.fromJS(module);
                        observableModules.push(observableModule);
                    });

                    self.modules(observableModules);

                    const observableAnalyzers = [];

                    status.commandresult.analyzers.list.item.forEach(function (analyzer) {
                        const observerableAnalyzer = ko.mapping.fromJS(analyzer);

                        observerableAnalyzer.configID = ko.pureComputed({
                            read: () => parseInt(observerableAnalyzer["@@id"](), 10)
                        });

                        observerableAnalyzer.analyzerType = ko.pureComputed({
                            read: () => parseInt(observerableAnalyzer["@@analyzer_type"](), 10)
                        });

                        observerableAnalyzer.analyzerTypeName = ko.pureComputed({
                            read: () => `[${observerableAnalyzer.analyzerType()}]: ${analyzerTypes[analyzerTypeKeys[observerableAnalyzer.analyzerType()]].name}`
                        });

                        observerableAnalyzer.isSelected = ko.pureComputed({
                            read: () => observerableAnalyzer.configID() === viewModel.currentConfigID()
                        });

                        observerableAnalyzer.montitoringStatus = ko.pureComputed({
                            read: () => parseInt(observerableAnalyzer["@@monitoring_on"](), 10) > 0 ? "On" : "Off"
                        });

                        observableAnalyzers.push(observerableAnalyzer);
                    });

                    if (observableAnalyzers.length > 0)
                        $("#header-collapse").css("visibility", "visible");

                    self.analyzers(observableAnalyzers);

                    const promises = [];

                    promises.push(dataHub.getInstanceConfig(deviceID).done(function (configResult) {
                        const config = JSON.parse(configResult);

                        self.versionInfo(config.commandresult.characteristics.psz_version_string["@@value"]);
                        self.ipAddress(config.commandresult.communications.tcp_ip["@@ip_address"]);
                        self.siteName(config.commandresult.characteristics.psz_sitename["@@value"]);

                        $("[id=moduleRow]").css("visibility", "visible");
                        $("[id=analyzerRow]").css("visibility", "visible");
                    }));

                    promises.push(dataHub.getDeviceTimeWithError(deviceID).done(function (timeResult) {
                        const utcTimeText = `${timeResult.time} UTC`;
                        const localTime = utcTimeText.toDate();
                        const timeZone = localTime.toLocaleTimeString("en-us", { timeZoneName: "short" }).split(' ')[2];
                        const localTimeText = `${localTime.formatDate(ShortDateTimeFormat, false)} ${timeZone}`;

                        self.time(`${utcTimeText}<br/>${localTimeText}`);
                        self.timeError(timeResult.error);
                        self.timeErrorText(`${timeResult.errorText}<br/>${timeResult.error < 0 ? "behind" : "ahead of"} server time`);
                    }));

                    return $(promises).whenAll().then(function () {
                        self.isDirty(false);

                        // Make sure table is refreshed
                        if (ko.options.deferUpdates)
                            ko.tasks.runEarly();
                    });
                })
                .fail(function (error) {
                    showErrorMessage(error, null, true);
                });
            }

            self.getAnalyzer = function (configID) {
                const analyzers = self.analyzers();

                for (let i = 0; i < analyzers.length; i++) {
                    const analyzer = analyzers[i];

                    if (analyzer.configID() === configID)
                        return analyzer;
                }

                return undefined;
            }

            self.configChanged = function () {
                self.currentAnalyzerConfig.valueHasMutated();
                self.isDirty(true);
            }

            self.loadAnalyzerConfig = function (configID, analyzerType) {
                return dataHub.getAnalyzerConfig(deviceID, configID).then(function (configResult) {
                    return self._loadAnalyzerConfig(configID, analyzerType, JSON.parse(configResult));
                })
                .fail(function (error) {
                    showErrorMessage(`Load Analyzer Config "${error}"`, null, true);
                });
            }

            self.saveAnalyzerConfig = function () {
                if (!self.canSave()) {
                    showErrorMessage("Cannot save data at this time.");
                    return $.Deferred().resolve().promise();
                }

                showInfoMessage("Saving configuration, please wait...&nbsp;&nbsp;<span class=\"glyphicon glyphicon-refresh glyphicon-spin\"></span>", -1, true);
                showWorkingMessage("Saving");
                self._isSaving(true);

                const configID = self.currentConfigID();

                return dataHub.beginTransaction(deviceID).then(function () {
                    return dataHub.setAnalyzerConfig(deviceID, configID, JSON.stringify(self.currentAnalyzerConfig())).done(function () {
                        self.isDirty(false);
                        showInfoMessage("Save complete.", 5000);
                        hideInfoMessage({ closeHeaderPanel: true, closeFloatingPanels: false });
                        hideWorkingMessage();
                    })
                    .fail(function (error) {
                        hideInfoMessage();
                        showErrorMessage(`Save Configuration ${error}`, null, true);
                        hideWorkingMessage();
                    });
                })
                .fail(function (error) {
                    hideInfoMessage();
                    showErrorMessage(`Begin Transaction ${error}`, null, true);
                    hideWorkingMessage();
                })
                .always(function () {
                    dataHub.endTransaction(deviceID).fail(function (error) {
                        showErrorMessage(`End Transaction ${error}`, null, true);
                    });

                    self._isSaving(false);
                });
            }

            self.importAnalyzerConfig = function (fileData) {
                const reader = new FileReader();

                reader.onload = function () {
                    const configID = self.currentConfigID();
                    const config = JSON.parse(reader.result);

                    if (!config.commandresult || !config.commandresult.characteristics || !config.commandresult.characteristics.anyalyzer) {
                        showErrorMessage("Unexpected config file format", null, true);
                        return;
                    }

                    const analyzerType = parseInt(config.commandresult.characteristics.anyalyzer.analyzer_type["@@value"], 10);

                    self._loadAnalyzerConfig(configID, analyzerType, config).done(function () {
                        const selectedAnalyzer = self.selectedAnalyzer();

                        if (selectedAnalyzer) {
                            selectedAnalyzer["@@name"](config.commandresult.characteristics.anyalyzer.tag["@@value"]);
                            selectedAnalyzer["@@analyzer_type"](analyzerType.toString());
                        }

                        self.isDirty(true);
                    });
                };

                reader.onloadend = function () {
                    if (reader.error && reader.error.message)
                        showErrorMessage("Failed to import config file: " + reader.error.message);
                };

                reader.readAsText(fileData);
            }

            self.exportAnalyzerConfig = function (fileName) {
                const data = JSON.stringify(self.currentAnalyzerConfig(), null, 4);
                const anchor = $("#exportConfigFileLink");

                if (typeof anchor[0].download != "undefined") {
                    anchor.attr("href", "data:text/json;charset=utf-8," + encodeURIComponent(data));
                    anchor.attr("download", fileName);
                    anchor[0].click();
                } else {
                    if (isIE)
                        window.navigator.msSaveBlob(new Blob([data]), fileName);
                    else
                        window.open("data:text/json;charset=utf-8," + encodeURIComponent(data), "_blank", "");
                }
            };

            self.createSectionTabs = function (firstCall) {
                const activeSections = sections[self.currentAnalyzerType()];
                const tabList = [];
                const tabSections = [];

                tabList.push(`<ul id="tablist">`);

                for (let key in activeSections) {
                    if (activeSections.hasOwnProperty(key)) {
                        const section = activeSections[key];
                        const name = section.name;
                        const index = section.index;

                        tabList.push(`<li><a href="#tab${key}" onclick="viewModel.reloadTabSection('${key}', true)" tab-section-link>${name}</a></li>`);

                        tabSections.push(`<div id="tab${key}" class="tab-section" style="display: none" tab-section>`);
                        tabSections.push(`    <table width="75%" class="table-center">`);
                        tabSections.push(`        <tr>`);
                        tabSections.push(`            <th class="header"><div class="header">${name}</div></th>`);
                        tabSections.push(`        </tr>`);
                        tabSections.push(`    </table>`);

                        if (index === 0)
                            tabSections.push(`<div id="stubTabSections"></div>`);

                        tabSections.push(`</div>`);
                    }
                }

                tabList.push(`</ul>`);

                if (!firstCall)
                    $("#tabs").tabs("destroy");

                $("#tabs").html(tabList.join("\r\n") + tabSections.join("\r\n"));

                $("#tabs").tabs({
                    activate: function (event, ui) {
                        ui.newPanel.find(":input:not([type=hidden]):first").focus();
                        $("[tab-section-link]").tooltip("hide");
                    }
                });

                $("[tab-section-link]").tooltip({ title: "Shift+click to reload tab", placement: "top", delay: 1000 });
            }

            self.loadTabSection = function (sectionKey) {
                return dataHub.getSectionMap(`${sectionKey}.xml`).done(function (result) {
                    const [ sectionHtml, sectionScript ] = buildSection(JSON.parse(result).SECTION);

                    $(`#tab${sectionKey}`).html(sectionHtml);

                    if (sectionScript.length > 0) {
                        const scriptID = `${sectionKey}SectionMappings`;

                        if ($(`#${scriptID}`).length)
                            return;

                        const scriptElem = document.createElement("script");
                        scriptElem.id = scriptID;
                        scriptElem.innerHTML = sectionScript;
                        document.body.appendChild(scriptElem);
                    }
                }).fail(function (error) {
                    showErrorMessage(error, null, true);
                });
            }

            self.refreshTabSections = function () {
                $("[update-expr]").each(function () {
                    try {
                        eval($(this).attr("update-expr"));
                    } catch (e) {
                        console.error(e);
                    }
                });

                $("[data-toggle='tooltip'][map-expr]")
                    .tooltip({
                        html: true,
                        trigger: "manual",
                        boundary: "viewport",
                        placement: "top",
                        container: "body",
                        sanitize: true,
                        appendToBody: true
                    })
                    .hover(showToolTip, hideToolTip);
            }

            self.reloadTabSection = function (sectionKey, whenShiftIsDown) {
                if (whenShiftIsDown && !shiftIsDown)
                    return;

                self.reloadTabSections(sectionKey);
                showInfoMessage(`Reloaded "${sectionKey}" tab section...`);
            }

            self.reloadTabSections = function() {
                const currentSectionKeys = sectionKeys[self.currentAnalyzerType()];
                const targetSectionKeys = arguments.length === 0 ? currentSectionKeys : Array.from(arguments);
                const promises = [];

                for (let i = 0; i < targetSectionKeys.length; i++) {
                    const sectionKey = targetSectionKeys[i];

                    if (currentSectionKeys.indexOf(sectionKey) !== -1)
                        promises.push(self.loadTabSection(sectionKey));
                }

                return $(promises).whenAll().then(self.refreshTabSections);
            }

            self._loadAnalyzerConfig = function (configID, analyzerType, analyzerConfig) {
                if (analyzerTypeKeys.every(key => analyzerType !== analyzerTypes[key].index)) {
                    showErrorMessage(`Cannot load configuration from unknown analyzer type "${analyzerType}"`, null, true);
                    return $.Deferred().resolve().promise();
                }

                self.isDirty(false);
                self.currentConfigID(configID);             // Integer analyzer configuration ID
                self.currentAnalyzerType(analyzerType);     // Integer analyzer type (see analyzerTypes)
                self.currentAnalyzerConfig(analyzerConfig); // Dranetz XML config serialized as JSON

                const power = analyzerConfig.commandresult.characteristics.anyalyzer.VA_power;

                // Set circuit type, i.e., wiring config value, early as this is a key config parameter
                self.setWiringConfigValue(power.config['@@value']);

                if (self.vNom === undefined)
                    self.vNom = power.nominal_volts["@@value"];

                if (self.iNom === undefined)
                    self.iNom = power.nominal_amps["@@value"];

                if (!$("#stubTabSections").length)
                    self.createSectionTabs();

                resizePageElements();

                if (!self.dataHubIsConnected())
                    return $.Deferred().resolve().promise();

                const activeSections = sections[analyzerType];
                const promises = [];

                for (let key in activeSections) {
                    if (activeSections.hasOwnProperty(key)) {
                        // Other tabs depend on values loaded into primary tabs, so make sure
                        // values are refreshed for first tab as soon as it is loaded
                        if (activeSections[key].index === 0)
                            promises.push(self.loadTabSection(key).done(self.refreshTabSections));
                        else
                            promises.push(self.loadTabSection(key));
                    }
                }

                return $(promises).whenAll().then(function () {
                    setActiveTabIndex(0);
                    self.refreshTabSections();
                });
            }
        }

        function resizePageElements() {
            let height = $("#contentWell").height() -
                $("#headerArea").outerHeight(true) - 55;

            if ($("#tablist").length)
                height -= $("#tablist").outerHeight(true);

            if ($("#busyDataBlock").is(":visible"))
                height -= $("#busyDataBlock").outerHeight(true);

            if (height > 75)
                $("[tab-section]").height(height);

            $("#graphDataFrame").attr({
                "height": `${$("#contentWell").outerHeight(true)}px`
            });
        }

        function showWorkingMessage(message) {
            $("#busyDataLabel").text(message);
            $("#busyDataBlock").show();
            $("body").addClass("wait");
            resizePageElements();
        }

        function hideWorkingMessage() {
            $("#busyDataBlock").hide();
            $("body").removeClass("wait");
            resizePageElements();
        }

        function showLoadingMessage() {
            $("#responsiveTableDiv").show();
            showWorkingMessage("Loading");
        }

        function hideLoadingMessage() {
            hideWorkingMessage();
        }

        function loadAnalyzerConfig(record) {
            if (viewModel.canSave() && !confirm("WARNING: Configuration changes to current analyzer are not saved. Are you sure you want to lose current changes and load new analyzer?"))
                return $.Deferred().resolve().promise();

            const configID = parseInt(record["@@id"](), 10);
            const analyzerType = parseInt(record["@@analyzer_type"](), 10);

            viewModel.currentConfigID(configID);

            showInfoMessage(`Loading \"${viewModel.selectedAnalyzer()["@@name"]()}\" configuration, please wait...&nbsp;&nbsp;<span class="glyphicon glyphicon-refresh glyphicon-spin"></span>`, -1, true);
            hideInfoMessage({ closeHeaderPanel: false, closeFloatingPanels: true });
            hideErrorMessage();
            showLoadingMessage();

            return viewModel.loadAnalyzerConfig(configID, analyzerType).done(function () {
                showInfoMessage("Load complete.", 5000);
                hideInfoMessage({ closeHeaderPanel: true, closeFloatingPanels: false });
                hideLoadingMessage();
            })
            .fail(function (error) {
                hideInfoMessage();
                showErrorMessage(`Load Configuration ${error}`, null, true);
                hideLoadingMessage();
            });
        }

        function importConfigFile(event) {
            setTimeout(function () {
                const files = event.target.files;

                viewModel.importAnalyzerConfig(files[0]);

                $("#importConfigFileName").val("");
            }, 100);
        }

        function showImportConfigFileNameDialog() {
            if (viewModel.canSave() && !confirm("WARNING: Configuration changes are not saved. Are you sure you want to lose current changes and import new config?"))
                return;

            $("#importConfigFileName").trigger("click");
        }

        function showExportConfigFileNameDialog() {
            $("#exportConfigFileNameDialog").toggle();

            if ($("#exportConfigFileNameDialog").is(":visible")) {
                const selectedAnalyzer = viewModel.selectedAnalyzer();

                if (selectedAnalyzer)
                    $("#exportConfigFileName").val(`${selectedAnalyzer["@@name"]()}.json`);
                else
                    $("#exportConfigFileName").val("");

                $("#exportConfigFileName").focus();
            }
        }

        function getActiveTabIndex() {
            return $("#tabs").tabs("option", "active");
        }

        function setActiveTabIndex(index) {
            const analyzerType = viewModel.currentAnalyzerType();
            $("#tabs").tabs({ active: index });
            $(`#tab${sectionKeys[analyzerType][index]}`).find(":input:not([type=hidden]):first").focus();
        }

        function getActiveTabSection() {
            const analyzerType = viewModel.currentAnalyzerType();
            return sections[analyzerType][sectionKeys[analyzerType][getActiveTabIndex()]];
        }

        function setActiveTabSection(section) {
            setActiveTabIndex(section.index);
        }

        function showToolTip() {
            if (shiftIsDown) {
                const mapRootLen = "viewModel.currentAnalyzerConfig().".length;
                const mapExpr = $(this).attr("map-expr");
                $(this).attr("data-original-title", `<p class="text-left">map: ${mapExpr.substr(mapRootLen)}<br/>value: ${eval(mapExpr)}</p>`)
                    .tooltip("fixTitle")
                    .tooltip("show");
            }
        }

        function hideToolTip() {
            $(this).tooltip("hide");
        }

        function clearGraphDataWindow() {
            $("#graphDataFrame").attr({ "src": "about:blank" });
        }

        function openGraphDataWindow(record) {
            const analyzer = viewModel.getAnalyzer(parseInt(record["@@id"](), 10));

            if (!analyzer)
                return;

            // Delta wiring configurations do not include neutral values, defaulting to line-to-line voltage angle in this case
            const referenceAngle = viewModel.currentWiringConfig().type.toUpperCase() === "DELTA" ?
                "VABA" /* Voltage A to B Angle */ :
                "VANA" /* Voltage A to Neutral Angle */;

            $("#graphDataFrame").attr({
                "src": `DranetzGraph.cshtml?DeviceID=@deviceID&ConfigID=${analyzer.configID()}&AnalyzerName=${analyzer['@@name']()}&AnalyzerType=${analyzer.analyzerType()}&AnalyzerTypeName=${analyzer.analyzerTypeName()}&vNom=${viewModel.vNom}&iNom=${viewModel.iNom}&ReferenceAngle=${referenceAngle}`,
                "height": `${$("#contentWell").outerHeight(true)}px`,
                "width": "100%"
            });

            $("#graphDataWindow").modal("show");
        }

        // Page initialization function
        $(function() {
            $("#bodyContainer").addClass("fill-height");
            $("#pageHeader").css("margin-bottom", "-20px");

            // Enable deferred updates for better performance
            ko.options.deferUpdates = true;

            // Create the primary view model
            viewModel = new DeviceViewModel();

            // Initialize primary view model
            ko.applyBindings(viewModel, document.getElementsByTagName("body")[0]);

            // Monitor for view model changes
            ko.watch(viewModel.devices, { depth: -1 }, function(parents, child, item) {
                viewModel.isDirty(true);
            });

            // Setup export config file name dialog functionality
            $("#exportConfigFile").click(function () {
                $("#exportConfigFileNameDialog").hide();

                let fileName = $("#exportConfigFileName").val();

                if (!fileName.endsWith(".json"))
                    fileName += ".json";

                viewModel.exportAnalyzerConfig(fileName);
            });

            // Make enter key auto-click save
            $("#exportConfigFileName").keyup(function (event) {
                if (event.keyCode === 13)
                    $("#exportConfigFile").click();
            });

            // Auto-select all text on focus
            $("#exportConfigFileName").focus(function () {
                $(this).select();
            });

            // Prevent default form submission when user presses enter
            $("#exportConfigFileNameDialog").submit(function () {
                return false;
            });

            // Auto-hide pop-up form when user clicks outside form area
            $("#exportConfigFileNameDialog").focusout(function () {
                if (!$("#exportConfigFileNameDialog").is(":hover") && !$("#exportConfigButton").is(":hover"))
                    $("#exportConfigFileNameDialog").hide();
            });

            // Let view model know about hub connectivity changes
            $(window).on("hubConnected", function() {
                viewModel.dataHubIsConnected(true);

                if (deviceID <= 0 || viewModel.currentAnalyzerConfig().commandresult)
                    return;

                // Handle initial page load
                showInfoMessage("Loading device details, please wait...&nbsp;&nbsp;<span class=\"glyphicon glyphicon-refresh glyphicon-spin\"></span>", -1, true);
                showLoadingMessage();

                dataHub.queryDeviceByID(deviceID).done(function (device) {
                    $("#editDeviceName").html(`Editing&nbsp;${device.Acronym}`);

                    viewModel.queryModules().done(function () {
                        // Create initial section tabs
                        viewModel.createSectionTabs(true);

                        setTimeout(function () {
                            loadAnalyzerConfig(viewModel.analyzers()[viewModel.currentAnalyzerType()]);
                            $("[show-data-button]").tooltip({placement: "top", delay: { "show": 500, "hide": 100 }});
                        }, 500);
                    })
                    .fail(function (error) {
                        hideInfoMessage();
                        showErrorMessage(`Device Info Load ${error}`, null, true);
                        hideLoadingMessage();
                    });
                })
                .fail(function (error) {
                    hideInfoMessage();
                    showErrorMessage(`Device Query ${error}`, null, true);
                    hideLoadingMessage();
                });
            });

            $(window).on("hubDisconnected", function() {
                viewModel.dataHubIsConnected(false);
            });

            $("#saveChangesButton").click(function (e) {
                e.preventDefault();
                viewModel.saveAnalyzerConfig();
            });

            $("#restartDeviceButton").click(function (e) {
                e.preventDefault();

                if (!viewModel.canRestart()) {
                    showErrorMessage("Cannot restart at this time.");
                    return;
                }

                const hardRestart = $("#hardRestart").is(":checked");

                if (confirm(`Are you sure you want to ${hardRestart ? "hard " : ""}restart device?`)) {
                    showInfoMessage("Attempting to restart device...", -1, true);
                    showWorkingMessage("Restarting");

                    dataHub.restartDevice(deviceID, hardRestart).done(function () {
                        showInfoMessage("Device restart request sent successfully.", null, true);
                        hideWorkingMessage();
                    })
                    .fail(function (error) {
                        hideInfoMessage();
                        showErrorMessage(`Device Restart ${error}`, null, true);
                        hideWorkingMessage();
                    });
                }
            });

            $(window).bind("beforeunload", function () {
                if (viewModel.isSaving()) {
                    return "WARNING: Currently attempting to save changes. It is recommended to stay on page until save completes. Are you sure want to exit page?";
                }
                else {
                    return viewModel.canSave() ?
                        "WARNING: Configuration changes are not saved. Are you sure you want to lose changes and exit page?" :
                        undefined;
                }
            });

            $("#headerArea").on("shown.bs.collapse", function() {
                resizePageElements();
            });

            $("#headerArea").on("hidden.bs.collapse", function() {
                resizePageElements();
            });

            $(window).on("messageVisibiltyChanged", function () {
                resizePageElements();
            });

            $(window).resize(function () {
                resizePageElements();
            });

            resizePageElements();

            if (deviceID === 0)
                $("#noDeviceDataMessage").show();

            $("#graphDataWindow").modal({ show: false, backdrop: "static", keyboard: false });

            $(document).on("hidden.bs.modal", "#graphDataWindow", function () {
                clearGraphDataWindow();
            });
        });

        // Non-config related UI control variables

        function updateWiringConfig(value) {
            viewModel.setWiringConfigValue(value);
            viewModel.reloadTabSections(); // Reload all tabs
            showInfoMessage(`Selected "${viewModel.currentWiringConfig().name}" circuit type...`);
        }

        let normalizeThresholdState = Cookies.get("normalizeThresholds") || "1";

        function normalizeThresholds() {
            return parseInt(normalizeThresholdState, 10) > 0;
        }

        function normalizeThresholdStateUpdated() {
            Cookies.set("normalizeThresholds", normalizeThresholdState, { expires: 365 });

            const selectedInput = ($("#inputSection_bankInput").val() || [0])[0];

            viewModel.reloadTabSections("RMSVariations", "Transients", "Power", "Harmonics").then(function () {
                $("#inputSection_bankInput").val([selectedInput]).trigger("change");
            });

            showInfoMessage(`Switched to ${normalizeThresholds() ? 'normalized' : 'raw'} thresholds...`);
        }

        let genericChannelNames = (Cookies.get("genericChannelNames") || "1|2|3|4").split("|");

        if (genericChannelNames.length !== 4) {
            if (genericChannelNames.length < 4) {
                for (let i = genericChannelNames.length; i < 4; i++)
                    genericChannelNames.push((i + 1).toString());
            }
            else {
                genericChannelNames.splice(4, genericChannelNames.length - 4);
            }
        }

        function genericChannelNameUpdated() {
            Cookies.set("genericChannelNames", genericChannelNames.join("|"), { expires: 365 });

            const selectedInput = ($("#inputSection_bankInput").val() || [0])[0];

            viewModel.reloadTabSections("RMSVariations", "Transients", "WaveformCapture", "Power", "EnergyAndDemand", "Harmonics").then(function () {
                $("#inputSection_bankInput").val([selectedInput]).trigger("change");
            });;

            showInfoMessage(`Generic channel name updated...`);
        }

        function getChannelName(index, neutralName) {
            return configMatches("Generic") ?
                genericChannelNames[index] :
                index < 3 ? String.fromCharCode(65 + index) : neutralName || "N";
        }

        // Section Map Builder code - consider migrating to independent file

        function htmlEncode(value) {
            return $("<div/>").text(value).html().replace(/&/g, "%26");
        }

        let bankIndex = undefined;

        function execOperationAtBankIndex(index, operation) {
            try {
                bankIndex = index;
                operation();
            }
            finally {
                bankIndex = undefined;
            }
        }

        function readValue(element, readOperation, isCheckBox) {
            const target = $(element);
            const bank = target.attr("bank");

            // Handle multi-select bank list read operation
            if (bank && bank.length) {
                const selections = getVal(bank);

                if (Array.isArray(selections) && selections.length > 1) {
                    const values = [];

                    selections.forEach(selection => {
                        execOperationAtBankIndex(parseInt(selection, 10), readOperation);
                        values.push(isCheckBox ? target.prop("checked") : target.val());
                    });

                    // If any selected items have different values, clear target
                    if (values.some(value => value !== values[0])) {
                        if (isCheckBox)
                            target.prop("checked", false);
                        else
                            target.val("");
                    }
                }
                else {
                    readOperation();
                }
            }
            else {
                readOperation();
            }
        }

        function writeValue(element, writeOperation) {
            const target = $(element);
            const bank = target.attr("bank");

            // Handle multi-select bank list write operation
            if (bank && bank.length) {
                const selections = getVal(bank);

                if (Array.isArray(selections) && selections.length > 1) {
                    // Assign changed value to all selected items
                    selections.forEach(selection => {
                        execOperationAtBankIndex(parseInt(selection, 10), writeOperation);
                    });
                }
                else {
                    writeOperation();
                }
            }
            else {
                writeOperation();
            }
        }

        function getVal(targetID, targetType) {
            const target = $(`#${targetID}`);

            // Check if target is a bank list
            if (target[0].hasAttribute("bank-list")) {
                if (bankIndex === undefined) {
                    const values = target.val() || [];

                    if (values.length > 0)
                        return values.length === 1 ? parseInt(values[0], 10) : values;

                    return 0;
                }
                else {
                    return bankIndex;
                }
            }
            else {
                const value = target.val();

                switch (targetType) {
                    case undefined:
                    case "float":
                        return parseFloat(value);
                    case "int":
                        return parseInt(value, 10);
                    case "bool":
                        return parseInt(value, 10) !== 0;
                    default:
                        return value.toString();
                }
            }
        }

        function getKeyValue(targetSelectID, targetType) {
            const selectedOption = $(`#${targetSelectID} option:selected`);

            if (selectedOption.length === 0) {
                switch (targetType) {
                    case undefined:
                    case "float":
                        return 0.0;
                    case "int":
                        return 0;
                    case "bool":
                        return false;
                    default:
                        return "";
                }
            }

            const value = selectedOption.attr("key-value");

            switch (targetType) {
                case undefined:
                case "float":
                    return parseFloat(value);
                case "int":
                    return parseInt(value, 10);
                case "bool":
                    return parseInt(value, 10) !== 0;
                default:
                    return value.toString();
            }
        }

        function selectBankItem(bankTargetID) {
            $(`[bank="${bankTargetID}"]`).each(function () {
                try {
                    eval($(this).attr("update-expr"));
                } catch (e) {
                    console.error(e);
                }
            });
        }

        const PropDefType = {
            CHECKBOX:      "0",
            NUMERIC:       "1",
            FLOAT:         "2",
            HEADER:        "3",
            TEXT:          "4",
            DATE:          "5",
            TIME:          "6",
            SELECT:        "8",
            DATETIMERANGE: "11",
            PASSWORD:      "12",
            MULTILINETEXT: "13"
        }

        const maxAliasParams = 5;
        const unmapped = 0;

        function configMatches() {
            const args = arguments.length === 1 && Array.isArray(arguments[0]) ?
                arguments[0] :
                Array.from(arguments);

            if (args.length === 0)
                return false;

            for (let i = 0; i < args.length; i++)
                args[i] = args[i].trim().toUpperCase();

            // key value DOM lookup: getKeyValue("inputSection_wiringConfig", "string").trim().toUpperCase()
            const keyValue = viewModel.currentWiringConfig().type.toUpperCase();

            return args.every(arg => arg.startsWith("!")) ?
                /* AND logic: */ args.every(arg => arg.substr(1) !== keyValue) :
                /*  OR logic: */ args.some(arg => arg.startsWith("!") ? arg.substr(1) !== keyValue : arg === keyValue);
        }

        function elementTargetsInputConfig(definition) {
            if (definition.hasOwnProperty("@@CONFIG")) {
                const config = definition["@@CONFIG"].trim();

                if (config.length > 0 && config !== "*" && !configMatches(config.split(",")))
                    return false;
            }

            const currentAnalyzer = viewModel.currentAnalyzerType();
            let targetAnalyzer = 0;

            if (definition.hasOwnProperty("@@ANALYZER")) {
                let analyzer = definition["@@ANALYZER"].trim();

                // Check for exact match
                if (analyzer.endsWith("!")) {
                    analyzer = analyzer.substring(0, analyzer.length - 1);
                    return parseInt(analyzer, 10) === currentAnalyzer;
                }

                targetAnalyzer = parseInt(analyzer, 10);
            }

            // [0] PQ Data Node analyzer considered to apply to all
            return targetAnalyzer === 0 || currentAnalyzer === 0 || targetAnalyzer === currentAnalyzer;
        }

        function buildListElements(list, defaultVal) {
            let index = 0;
            let totalOptions = 0;

            const html = [];

            for (let i = 0; i < list.ITEM.length; i++) {
                const value = list.ITEM[i];

                if (elementTargetsInputConfig(value)) {
                    const optVal = value["@@VALUE"] || index;
                    const keyVal = value["@@KEYVALUE"] ? ` key-value="${htmlEncode(value["@@KEYVALUE"])}"` : "";
                    const selected = optVal === defaultVal || !defaultVal && totalOptions === 0 ? " selected" : "";
                    let alias = value["@@ALIAS"];

                    if (alias) {
                        for (let j = 0; j < maxAliasParams; j++) {
                            const aliasParam = value[`@@ALIAS${j}`];

                            if (aliasParam)
                                alias = alias.replaceAll(`{${j}}`, eval(aliasParam));
                            else
                                break;
                        }
                    }

                    html.push(`<option value="${optVal}"${keyVal}${selected}>${htmlEncode(alias || value["@@NAME"])}</option>`);
                    totalOptions++;
                }

                index++;
            }

            return [ html.join(""), totalOptions ];
        }

        function buildPropDefElement(propDef, mapRoot, bankTarget) {
            if (parseInt(propDef["@@ENABLED"] || "1", 10) === 0)
                return [ "", "" ];

            const type = propDef["@@TYPE"];
            const name = propDef["@@NAME"];
            let alias = propDef["@@ALIAS"];

            if (alias) {
                for (let i = 0; i < maxAliasParams; i++) {
                    const aliasParam = propDef[`@@ALIAS${i}`];

                    if (aliasParam)
                        alias = alias.replaceAll(`{${i}}`, eval(aliasParam));
                    else
                        break;
                }
            }

            const getPropVal = type === PropDefType.CHECKBOX ? `$('#${name}').prop('checked')` : `$('#${name}').val()`;
            const setPropVal = type === PropDefType.CHECKBOX ? `$('#${name}').prop('checked', {0})` : `$('#${name}').val({0})`;
            const readOnly = parseInt(propDef["@@RO"] || "1", 10) > 0;
            const map = propDef["@@MAP"] || "unmapped";
            const mapExpr = String.format(map.startsWith(".") ? `${mapRoot}${map}` : map, bankTarget);

            const applySubstitutions = value => value
                .replaceAll("{name}", name)
                .replaceAll("{value}", getPropVal)
                .replaceAll("{mapExpr}", mapExpr)
                .replaceAll("{mapRoot}", mapRoot)
                .replaceAll("{bankTarget}", bankTarget);

            const readExpr = propDef["@@READ"] ? applySubstitutions(propDef["@@READ"]) : undefined;
            const writeExpr = propDef["@@WRITE"] ? applySubstitutions(propDef["@@WRITE"]) : undefined;
            const preReadExpr = propDef["@@PREREAD"] ? `${applySubstitutions(propDef["@@PREREAD"])}; ` : "";
            const postReadExpr = propDef["@@POSTREAD"] ? ` ${applySubstitutions(propDef["@@POSTREAD"])};` : "";
            const preWriteExpr = propDef["@@PREWRITE"] ? `${applySubstitutions(propDef["@@PREWRITE"])}; ` : "";
            const postWriteExpr = propDef["@@POSTWRITE"] ? ` ${applySubstitutions(propDef["@@POSTWRITE"])};` : "";
            const updatesConfigExpr = parseInt(propDef["@@UPDATESCONFIG"] || "1", 10) !== 0 ? " viewModel.configChanged();" : "";

            const updateFunction = `const update_{0} = new Function("${readOnly ? "" : `${preReadExpr}{1};${postReadExpr}`}");`;
            const changedFunction = `const {0}_changed = new Function("${preWriteExpr}{1};${postWriteExpr}${updatesConfigExpr}");`;

            const defaultVal = propDef["@@DEFAULT"];
            const placeHolderText = propDef["@@PLACEHOLDER"] ? ` placeholder="${propDef["@@PLACEHOLDER"]}"` : "";
            const hasParam = propDef.hasOwnProperty("PARAM");
            const min = hasParam ? propDef.PARAM["@@MIN"] : undefined;
            const max = hasParam ? propDef.PARAM["@@MAX"] : undefined;
            const minMaxText = `${min ? ` min="${min}"` : ``}${max ? ` max="${max}"` : ``}`;
            const maxLen = hasParam ? propDef.PARAM["@@LEN"] : undefined;
            const maxLenText = `${maxLen ? ` maxlength="${maxLen}"` : ``}`;

            const html = [];
            const script = [];

            if (!bankTarget)
                bankTarget = "";

            html.push(`<tr><th class="text-right pad-right" width="30%">${alias || name}:</th><td>`);

            switch (type) {
                case PropDefType.CHECKBOX:
                    script.push(String.format(updateFunction, name, `${String.format(setPropVal, `${readExpr ? String.format(readExpr, mapExpr) : `parseInt(${mapExpr}, 10) !== 0`}`)}`));
                    script.push(String.format(changedFunction, name, `${mapExpr} = ${writeExpr ? String.format(writeExpr, getPropVal) : `${getPropVal} ? '1' : '0'`}`));
                    html.push(`<input type="checkbox" id="${name}" onchange="writeValue(this, ${name}_changed)" update-expr="readValue(this, update_${name}, true)" data-toggle="tooltip" map-expr="${mapExpr}" bank="${bankTarget}"/>`);
                    break;
                case PropDefType.NUMERIC:
                    script.push(String.format(updateFunction, name, `${String.format(setPropVal, `${readExpr ? String.format(readExpr, mapExpr) : mapExpr}`)}`));
                    script.push(String.format(changedFunction, name, `${mapExpr} = ${writeExpr ? `(${String.format(writeExpr, getPropVal)}).toString()` : getPropVal}`));
                    html.push(`<input type="number" class="form-control" id="${name}"${minMaxText}${placeHolderText} onchange="writeValue(this, ${name}_changed)" update-expr="readValue(this, update_${name})" data-toggle="tooltip" map-expr="${mapExpr}" bank="${bankTarget}"/>`);
                break;
                case PropDefType.FLOAT:
                    script.push(String.format(updateFunction, name, `${String.format(setPropVal, `${readExpr ? `(${String.format(readExpr, mapExpr)})` : `parseFloat(${mapExpr})`}.toFixed(4)`)}`));
                    script.push(String.format(changedFunction, name, `${mapExpr} = ${writeExpr ? `(${String.format(writeExpr, getPropVal)}).toString()` : getPropVal}`));
                    html.push(`<input type="number" class="form-control" id="${name}"${minMaxText}${placeHolderText} onchange="writeValue(this, ${name}_changed)" update-expr="readValue(this, update_${name})" data-toggle="tooltip" map-expr="${mapExpr}" bank="${bankTarget}"/>`);
                    break;
                case PropDefType.TEXT:
                case PropDefType.PASSWORD:
                    script.push(String.format(updateFunction, name, `${String.format(setPropVal, `${readExpr ? String.format(readExpr, mapExpr) : mapExpr}`)}`));
                    script.push(String.format(changedFunction, name, `${mapExpr} = ${writeExpr ? `(${String.format(writeExpr, getPropVal)}).toString()` : getPropVal}`));
                    html.push(`<input type="${type === PropDefType.TEXT ? "text" : "password"}" class="form-control" id="${name}"${maxLenText}${placeHolderText} onchange="writeValue(this, ${name}_changed)" update-expr="readValue(this, update_${name})" data-toggle="tooltip" map-expr="${mapExpr}" bank="${bankTarget}"/>`);
                    break;
                case PropDefType.SELECT:
                    script.push(String.format(updateFunction, name, `${String.format(setPropVal, `${readExpr ? String.format(readExpr, mapExpr) : mapExpr}`)}`));
                    script.push(String.format(changedFunction, name, `${mapExpr} = ${writeExpr ? `(${String.format(writeExpr, getPropVal)}).toString()` : getPropVal}`));
                    html.push(`<select class="form-control" id="${name}" onchange="writeValue(this, ${name}_changed)" update-expr="readValue(this, update_${name})" data-toggle="tooltip" map-expr="${mapExpr}" bank="${bankTarget}">`);
                    html.push(buildListElements(propDef.PARAM.LIST, defaultVal)[0]);
                    html.push(`</select>`);
                    break;
            }

            html.push(`</td></tr>`);

            return [ elementTargetsInputConfig(propDef) ? html.join("") : "", script.join("\r\n") ];
        }

        function buildBankElement(definition, mapRoot, sectionName) {
            const bankName = definition["@@NAME"];
            const bankAlias = definition["@@ALIAS"];
            const rows = definition["@@ROWS"];

            const sizeToken = "[_SIZE-TOKEN_]";
            let sizeAttribute = "";

            const html = [];
            const script = [];

            html.push(`<tr><th class="header${definition.order > 0 ? "-section-row" : ""} bank-header"><div class="header">${bankAlias}</div></th></tr>`);
            html.push(`<tr class="bank-group"><td class="bank-group">`);

            var propDefsStarted = false;

            const startPropDefs = function () {
                if (propDefsStarted)
                    return;

                propDefsStarted = true;
                html.push(`<table class="section-elements">`);
            };

            const closePropDefs = function () {
                if (!propDefsStarted)
                    return;

                propDefsStarted = false;
                html.push(`</table>`);
            };

            const addPropDef = function (propDef) {
                if (propDef["@@TYPE"] === PropDefType.HEADER) {
                    console.warn(`Unexpected header property definition encountered in section "${sectionName}" bank "${bankName}"`);
                    return;
                }

                if (propDef.hasOwnProperty("@@NAME"))
                    propDef["@@NAME"] = `${bankName}_${propDef["@@NAME"]}`;

                const [ propDefHtml, propDefScript ] = buildPropDefElement(propDef, mapRoot, bankName);

                html.push(propDefHtml);

                if (propDefScript.length > 0)
                    script.push(propDefScript);
            }

            for (let key in definition) {
                if (definition.hasOwnProperty(key) && !key.startsWith("@@")) {
                    const value = definition[key];

                    switch (key) {
                        case "LIST":
                        {
                            closePropDefs();
                            html.push(`<select multiple class="form-control list-bank" id="${bankName}"${sizeToken} onchange="selectBankItem('${bankName}')" update-expr="selectBankItem('${bankName}')" bank-list>`);

                            const [ listHtml, totalOptions ] = buildListElements(value);
                            html.push(listHtml);

                            if (rows) {
                                let selectSize = parseInt(rows, 10);

                                if (selectSize > totalOptions && totalOptions > 0)
                                    selectSize = totalOptions;

                                sizeAttribute = ` size="${selectSize}"`;
                            }

                            html.push(`</select>`);
                        }
                        break;
                        case "PROPDEF":
                        {
                            startPropDefs();

                            if (Array.isArray(value)) {
                                for (let i = 0; i < value.length; i++)
                                    addPropDef(value[i]);
                            }
                            else {
                                addPropDef(value);
                            }
                        }
                        break;
                    }
                }
            }

            closePropDefs();

            html.push(`</td></tr>`);
            html.push(`<tr><th class="header-section-row bank-footer"><div class="header"></div></th></tr>`);

            return [ elementTargetsInputConfig(definition) ? html.join("").replace(sizeToken, sizeAttribute) : "", script.join("\r\n") ];
        }

        function buildSection(section) {
            const mapRoot = `viewModel.currentAnalyzerConfig().${section["@@MAPROOT"]}`;
            const sectionName = section["@@NAME"];
            const html = [];
            const script = [];
            const definitions = [];
            let naturalOrder = 100000;

            html.push(`<table width="75%" class="table-center">`);

            var propDefsStarted = false;

            const startPropDefs = function () {
                if (propDefsStarted)
                    return;

                propDefsStarted = true;
                html.push(`<tr><td><table class="section-elements">`);
            };

            const closePropDefs = function () {
                if (!propDefsStarted)
                    return;

                propDefsStarted = false;
                html.push(`</table></td></tr>`);
            };

            const addSectionElementDefinition = function (definition, elementType) {
                if (definition.hasOwnProperty("@@NAME") && definition["@@TYPE"] !== PropDefType.HEADER)
                    definition["@@NAME"] = `${sectionName}Section_${definition["@@NAME"]}`;

                definition.order = definition.hasOwnProperty("@@ORDER") ?
                    parseInt(definition["@@ORDER"], 10) :
                    definitions.length > 0 ? naturalOrder++ : 0;

                definition.elementType = elementType;

                definitions.push(definition);
            }

            const addSectionElementDefinitions = function (elementType) {
                const definition = section[elementType];

                if (!definition)
                    return;

                if (Array.isArray(definition)) {
                    for (let i = 0; i < definition.length; i++) {
                        addSectionElementDefinition(definition[i], elementType);
                    }
                }
                else {
                    addSectionElementDefinition(definition, elementType);
                }
            };

            addSectionElementDefinitions("BANK");
            addSectionElementDefinitions("PROPDEF");

            definitions.sort((a, b) => a.order > b.order ? 1 : -1);

            for (let i = 0; i < definitions.length; i++) {
                const definition = definitions[i];

                switch (definition.elementType) {
                    case "BANK":
                    {
                        const [ bankHtml, bankScript ] = buildBankElement(definition, mapRoot, sectionName);

                        closePropDefs();
                        html.push(bankHtml);

                        if (bankScript.length > 0)
                            script.push(bankScript);
                    }
                    break;
                    case "PROPDEF":
                    {
                        if (definition["@@TYPE"] === PropDefType.HEADER) {
                            if (elementTargetsInputConfig(definition)) {
                                closePropDefs();
                                html.push(`<tr><th class="header${definition.order > 0 ? "-section-row": ""}"><div class="header">${definition["@@ALIAS"] || definition["@@NAME"]}</div></th></tr>`);
                            }
                        }
                        else {
                            const [ propDefHtml, propDefScript ] = buildPropDefElement(definition, mapRoot);

                            startPropDefs();
                            html.push(propDefHtml);

                            if (propDefScript.length > 0)
                                script.push(propDefScript);
                        }
                    }
                    break;
                }
            }

            closePropDefs();
            html.push(`</table>`);

            return [ html.join(""), script.join("\r\n") ];
        }
    </script>
}
