@*******************************************************************************************************
//  DranetzConfig.cshtml - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  05/19/2021 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Net.Http
@using System.Threading
@using GSF.Identity
@using GSF.Security
@using GSF.Web
@using GSF.Web.Model
@using GSF.Web.Shared
@using openMIC.Model
@* ReSharper disable Html.PathError *@
@* ReSharper disable UnknownCssClass *@
@* ReSharper disable CssBrowserCompatibility *@
@inherits ExtendedTemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.HidePageTitle = true;
    ViewBag.Title = "Manage Dranetz Configuration";

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();
    string parameter;
    int deviceID;

    if (!parameters.TryGetValue("DeviceID", out parameter) || !int.TryParse(parameter, out deviceID)) {
        deviceID = 0;
    }

    bool userIsEditor = UserIsEditor();
}
@section StyleSheets {
    <link href="@Resources.Root/Shared/Content/jquery-ui.css" rel="stylesheet">
    <style>
        html, body {
            height: 100%;
        }

        span.new-record {
            border: red;
            border-style: solid;
            border-width: 4px;
            display: inline-block;
            padding-left: 3px;
            padding-right: 4px;
        }

        span.existing-record {
            border: lawngreen;
            border-style: solid;
            border-width: 4px;
            display: inline-block;
            padding-left: 3px;
            padding-right: 4px;
        }

        /* Prevent label wrapping */
        #baseURLArea {
            width: 80%;
            display: inline-table;
            vertical-align: middle;
        }

        th.pad-right {
            padding-right: 8px;
            white-space: nowrap;
            width: 50%;
        }

        th.header {
            text-align: center;
            font-size: 18px;
            font-weight: bolder;
            padding-bottom: 5px;
            width: 100%;
        }

        th.header-section-row {
            text-align: center;
            font-size: 18px;
            font-weight: bolder;
            padding-bottom: 5px;
            padding-top: 15px;
            width: 100%;
        }
        
        tr.selected {
            background-color: #FFCF8B
        }

        .row-hover-highlight tr:hover {
            background-color: lightgray
        }

        div.header {
            border-bottom: 4px solid;
        }

        table.section-elements {
            border-spacing: 0 4px;
            border-collapse: separate;
            width: 100%;
        }

        .list-bank {
            margin-bottom: 10px;
        }

        th.bank-header {
            padding-bottom: 0;
        }

        th.bank-footer {
            padding-top: 0;
        }

        tr.bank-group {
            border: 1px solid;
        }

        td.bank-group {
            padding: 2px;
        }

        .btn-bank {
            padding-top: 0;
            padding-bottom: 0;
            padding-left: 5px;
        }

        /* Collapsable button style */
        .btn-collapsable.btn {
            color: #606060;
            font-family: "Glyphicons Halflings";
            font-size: 8pt;
            position: relative;
            top: -9px;
            right: -14px;
            padding: 0 2px 2px 2px;
            height: 18px;
            float: right !important;
        }

        /* Collapsable button icon when content is shown - arrow down */
        .btn-collapsable.btn:after {
            content: "\e114";
        }

        /* Collapsable button icon when content is hidden - arrow right */
        .btn-collapsable.btn.collapsed:after {
            content: "\e080";
        }

        .ui-tabs .ui-tabs-nav li a {
            font-size: 10pt !important;
        }

        input:out-of-range {
            background-color: #ff0000;
            background-color: rgba(255, 0, 0, 0.25);
        }

        .tooltip-inner {
            min-width: 100px;
            max-width: 100%;
        }

        @@media screen {
            .page-logo {
                margin-bottom: -25px;
                margin-top: 8px;
            }
        }

        @@media screen and (min-width: 992px) {
            .page-logo {
                margin-bottom: -25px;
                margin-top: 3px;
            }
        }
    </style>
}
@functions {
    public string GetCurrentUserID()
    {
        if (Thread.CurrentPrincipal.Identity == null)
            return UserInfo.CurrentUserID;

        return Thread.CurrentPrincipal.Identity.Name;
    }

    // This function simply limits access to UI elements that the user does not have access to, server-side
    // functions will further validate user rights even if UI restriction was somehow bypassed
    public bool UserIsEditor()
    {
        SecurityPrincipal securityPrincipal = ViewBag.SecurityPrincipal as SecurityPrincipal;

        if ((object)securityPrincipal == null)
            return false;

        return securityPrincipal.IsInRole("Administrator") || securityPrincipal.IsInRole("Editor");
    }
}
<div style="display: none" search-header></div>
<h3 style="margin-top: -10px;">@ViewBag.Title <span class="label label-info" id="editDeviceName"></span> <img class="page-logo pull-right" alt="Dranetz" src="Images/DranetzConfigEditor.png" /></h3>
<hr class="quarter-break" />
<div id="contentWell" class="well well-dynamic-content" content-fill-height>
    <div id="responsiveTableDiv" class="table-responsive" style="display: none; border: none">
        <table width="100%">
            <tr>
                <td width="50%" style="vertical-align: top">
                    <table width="95%">
                        <tr>
                            <th class="header" colspan="2"><div class="header">System</div></th>
                        </tr>
                        <tr>
                            <th class="text-center" style="padding-top: 2px; padding-bottom: 5px" colspan="2" data-bind="text: versionInfo"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Serial Number:</th>
                            <td class="text-left" data-bind="text: serialNumber"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">System Health:</th>
                            <td class="text-left" data-bind="text: systemHealth"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Database Health:</th>
                            <td class="text-left" data-bind="text: databaseHealth"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Comm. Module Firmware:</th>
                            <td class="text-left" data-bind="text: commFirmware"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Host Module Firmware:</th>
                            <td class="text-left" data-bind="text: hostFirmware"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">GPS Installed:</th>
                            <td class="text-left" data-bind="text: gpsInstalled"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">GPS Satellites:</th>
                            <td class="text-left" data-bind="text: gpsSatellites"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">IP Address:</th>
                            <td class="text-left" data-bind="text: ipAddress"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Site Name:</th>
                            <td class="text-left" data-bind="text: siteName"/>
                        </tr>
                    </table>
                </td>
                <td width="50%" style="vertical-align: top">
                    <table width="95%">
                        <tr>
                            <th class="header"><div class="header">Input Modules</div></th>
                        </tr>
                        <tr>
                            <td>
                                <table class="table table-condensed table-striped table-hover">
                                    <thead>
                                    <tr>
                                        <th class="text-center">ID</th>
                                        <th class="text-center">Model&nbsp;Number</th>
                                        <th class="text-center">Firmware</th>
                                        <th class="text-center">Changed?</th>
                                    </tr>
                                    </thead>
                                    <tbody data-bind="foreach: modules">
                                    <tr id="moduleRow" style="visibility: hidden">
                                        <td width="5%" class="text-center valign-middle" data-bind="text: $data['@@id']"/>
                                        <td width="75%" class="text-center valign-middle nowrap"><span data-bind="text: $data['@@model']"></span></td>
                                        <td width="15%" class="text-center valign-middle"><span data-bind="text: $data['@@firmware_version']"></span></td>
                                        <td width="5%" class="text-center valign-middle"><span data-bind="text: $data['@@module_changed']"></span></td>
                                    </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr>
                <td colspan="2" style="padding-top: 5px">
                    <table width="50%" style="margin: auto">
                        <tr>
                            <th class="header"><div class="header">Analyzers</div></th>
                        </tr>
                        <tr>
                            <td>
                                <table class="table table-condensed row-hover-highlight">
                                    <thead>
                                    <tr>
                                        <th class="text-center">Name</th>
                                        <th class="text-center">Type</th>
                                        <th class="text-center">Monitoring&nbsp;Status</th>
                                    </tr>
                                    </thead>
                                    <tbody data-bind="foreach: analyzers">
                                    <tr id="analyzerRow" style="visibility: hidden" data-bind="css: { selected: isSelected }">
                                        <td width="80%" class="text-center valign-middle nowrap"><btn type="button" class="btn btn-link" style="padding: 0" data-bind="text: $data['@@name'], click: loadAnalyzerConfig.bind($data)"/></td>
                                        <td width="10%" class="text-center valign-middle align-left nowrap" style="text-align: left" data-bind="text: analyzerTypeName"/>
                                        <td width="10%" class="text-center valign-middle"><span data-bind="text: montitoringStatus"></span></td>
                                    </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </table>

                </td>
            </tr>
        </table>
        <div id="loadingDataLabel" style="display: none">
            Loading&nbsp;&nbsp;<span class="glyphicon glyphicon-refresh glyphicon-spin"></span>
        </div>
        <div class="pull-right" style="margin-top: -35px">
            <button type="button" class="btn btn-sm btn-primary pull-right" id="saveChangesButton" data-bind="enable: canSave" onclick="viewModel.saveSection()">
                <span class="glyphicon glyphicon-floppy-save"></span>&nbsp;&nbsp;Save&nbsp;Changes
            </button>
        </div>
        <div id="tabs"></div>
    </div>
    <h3 id="noDeviceDataMessage" style="display: none; color: red">
        No device data could be loaded for device with <code>ID=@deviceID</code>
    </h3>
</div>
<hr id="view-spacer" class="thick-spacer" style="margin-top: -10px; margin-bottom: 8px"/>
<div class="panel panel-default">
    <div class="panel-heading" style="height: 30px; padding-top: 5px">
        <label>Analyzer&nbsp;Configuration</label>
        <button type="button" class="btn btn-xs btn-collapsable collapsed" style="top: 0; right: -10px" data-toggle="collapse" data-target="#analyzerConfiguration"></button>
    </div>
    <div class="panel-body collapse" style="padding: 2px; margin-bottom: -10px" id="analyzerConfiguration">
        <pre data-bind="text: JSON.stringify(currentAnalyzerConfig(), null, 4)"></pre>
    </div>
</div>
@section Scripts {
    <script src="@Resources.Root/Shared/Scripts/knockout.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.mapping.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.validation.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.reactor.js"></script>
    <script src="@Resources.Root/Shared/Scripts/gsf.web.knockout.js"></script>

    <script>
        "use strict";

        var viewModel = null;
        var deviceID = @deviceID;

        const analyzerTypes = {
            PQDataNode:      { index: 0, name: "61000 PQ DataNode" },
            VoltageDataNode: { index: 1, name: "61000 Voltage DataNode" },
            CurrentDataNode: { index: 2, name: "61000 Current DataNode" }
        };

        const analyzerTypeKeys = Object.keys(analyzerTypes);

        const sections = [
        {
            // [0] PQ Data Node Analyzer Sections
            InputConfiguration: { index: 0, name: "Input Configuration" },
            RMSVariations:      { index: 1, name: "RMS Variations" },
            Transients:         { index: 2, name: "Transients" },
            WaveformCapture:    { index: 3, name: "Waveform Capture" },
            Power:              { index: 4, name: "Power" },
            EnergyAndDemand:    { index: 5, name: "Energy and Demand" },
            Harmonics:          { index: 6, name: "Harmonics" },
            Flicker:            { index: 7, name: "Flicker" },
            CrossTriggering:    { index: 8, name: "Cross-Triggering" }
        },
        {
            // [1] Voltage Data Node Analyzer Sections
            InputConfiguration: { index: 0, name: "Input Configuration" },
            RMSVariations:      { index: 1, name: "RMS Variations" },
            Transients:         { index: 2, name: "Transients" },
            WaveformCapture:    { index: 3, name: "Waveform Capture" },
            Power:              { index: 4, name: "Voltage" },
            Harmonics:          { index: 5, name: "Harmonics" },
            Flicker:            { index: 6, name: "Flicker" },
            CrossTriggering:    { index: 7, name: "Cross-Triggering" }
        },
        {
            // [2] Current Data Node Analyzer Sections
            InputConfiguration: { index: 0, name: "Input Configuration" },
            RMSVariations:      { index: 1, name: "RMS Variations" },
            Transients:         { index: 2, name: "Transients" },
            WaveformCapture:    { index: 3, name: "Waveform Capture" },
            Power:              { index: 4, name: "Current" },
            EnergyAndDemand:    { index: 5, name: "Demand" },
            Harmonics:          { index: 6, name: "Harmonics" },
            CrossTriggering:    { index: 7, name: "Cross-Triggering" }
        }];

        const sectionKeys = [
            Object.keys(sections[analyzerTypes.PQDataNode.index]),
            Object.keys(sections[analyzerTypes.VoltageDataNode.index]),
            Object.keys(sections[analyzerTypes.CurrentDataNode.index])
        ];

        function DeviceViewModel() {
            const self = this;

            // Observable fields
            self.versionInfo = ko.observable("Encore Series Dranetz-BMI");
            self.serialNumber = ko.observable("");
            self.systemHealth = ko.observable("querying...");
            self.databaseHealth = ko.observable("");
            self.hostFirmware = ko.observable("");
            self.commFirmware = ko.observable("");
            self.gpsInstalled = ko.observable(false);
            self.gpsSatellites = ko.observable(0);
            self.ipAddress = ko.observable("");
            self.siteName = ko.observable("");
            self.modules = ko.observableArray();
            self.analyzers = ko.observableArray();
            self.currentAnalyzerConfig = ko.observable("");
            self.errors = ko.validation.group(self);

            // Internal fields
            self._dataHubIsConnected = ko.observable(false);
            self._isDirty = ko.observable(false);
            self._currentAnalyzerType = ko.observable(analyzerTypes.PQDataNode.index);

            // Properties
            self.dataHubIsConnected = ko.pureComputed({
                read: self._dataHubIsConnected,
                write: function (value) {
                    if (value === undefined)
                        value = false;

                    self._dataHubIsConnected(value);

                    if (value)
                        self.refreshValidationErrors();
                },
                owner: self
            });

            self.canSave = ko.pureComputed({
                read: function () {
                    return @(userIsEditor.ToString().ToLower()) &&
                        self.currentAnalyzerConfig().commandresult &&
                        self.isDirty() &&
                        self.dataHubIsConnected();
                },
                owner: self
            });

            self.isDirty = ko.pureComputed({
                read: self._isDirty,
                write: function (value) {
                    self._isDirty(value);
                },
                owner: self
            });

            self.currentAnalyzerType = ko.pureComputed({
                read: self._currentAnalyzerType,
                write: function (value) {
                    self._currentAnalyzerType(value);
                    self.analyzers.valueHasMutated();
                },
                owner: self
            });

            // Methods

            self.configChanged = function () {
                self.currentAnalyzerConfig.valueHasMutated();
                self.isDirty(true);
            }

            self.createSectionTabs = function (firstCall) {
                const activeSections = sections[self.currentAnalyzerType()];
                const tabList = [];
                const tabSections = [];

                tabList.push(`<ul>`);

                for (let key in activeSections) {
                    if (activeSections.hasOwnProperty(key)) {
                        const section = activeSections[key];
                        const name = section.name;
                        const index = section.index;

                        tabList.push(`<li><a href="#tab${key}">${name}</a></li>`);

                        tabSections.push(`<div id="tab${key}" ${index === 0 ? "class=\"ui-tabs-active\"" : "style=\"display: none\""}>`);
                        tabSections.push(`    <table width="75%" class="table-center">`);
                        tabSections.push(`        <tr>`);
                        tabSections.push(`            <th class="header"><div class="header">${name}</div></th>`);
                        tabSections.push(`        </tr>`);
                        tabSections.push(`    </table>`);
                        tabSections.push(`</div>`);
                    }
                }

                tabList.push(`</ul>`);

                if (!firstCall)
                    $("#tabs").tabs("destroy");

                $("#tabs").html(tabList.join("\r\n") + tabSections.join("\r\n"));

                $("#tabs").tabs({
                    active: 0,
                    activate: function(event, ui) {
                        if (self.isDirty() && confirm("Do you want to keep the changes?"))
                            self.saveSection();
                    }
                });
            }

            self.saveSection = function () {
                self.isDirty(false);
            }

            self.addSection = function (sectionKey, inputs) {
                const [ sectionHtml, sectionScript ] = inputs;

                $(`#tab${sectionKey}`).html(sectionHtml);

                if (sectionScript.length > 0) {
                    const scriptID = `${sectionKey}SectionMappings`;

                    if ($(`#${scriptID}`).length)
                        return;

                    const scriptElem = document.createElement("script");
                    scriptElem.id = scriptID;
                    scriptElem.innerHTML = sectionScript;
                    document.body.appendChild(scriptElem);
                }
            }

            self.loadAnalyzerConfig = function (configID, analyzerType) {
                if (analyzerTypeKeys.every(key => analyzerType !== analyzerTypes[key].index))
                {
                    showErrorMessage(`Cannot load configuration from unknown analyzer type "${analyzerType}"`, null, true);
                    return $.Deferred().resolve().promise();
                }

                self.isDirty(false);
                self.currentAnalyzerType(analyzerType);
                self.createSectionTabs();

                if (!self.dataHubIsConnected())
                    return $.Deferred().resolve().promise();

                return dataHub.getAnalyzerConfig(deviceID, configID).then(function (configResult) {
                    self.currentAnalyzerConfig(JSON.parse(configResult));
                }).then(function () {
                    const promises = [];
                    const activeSections = sections[analyzerType];

                    for (let key in activeSections) {
                        if (activeSections.hasOwnProperty(key)) {
                            promises.push(dataHub.getSectionMap(`${key}.xml`).done(function (result) {
                                self.addSection(key, buildSection(JSON.parse(result).SECTION));
                            }).fail(function (error) {
                                showErrorMessage(error, null, true);
                            }));
                        }
                    }

                    return $(promises).whenAll();
                }).then(function () {
                    setActiveTabIndex(0);

                    $("[update-expr]").each(function () {
                        try {
                            eval($(this).attr("update-expr"));
                        } catch (e) {
                            console.error(e);
                        }
                    });

                    $("[data-toggle='tooltip']")
                        .tooltip({ trigger: "manual" })
                        .hover(showToolTip, hideToolTip);
                });
            }

            self.queryModules = function () {
                if (!self.dataHubIsConnected())
                    return $.Deferred().resolve().promise();

                $("[id=moduleRow]").css("visibility", "hidden");
                $("[id=analyzerRow]").css("visibility", "hidden");
                self.modules.removeAll();

                return dataHub.getInstanceStatus(deviceID).then(function (statusResult) {
                    const status = JSON.parse(statusResult);

                    self.serialNumber(status.commandresult.characteristics["@@serial_number"]);
                    self.systemHealth(status.commandresult.characteristics["@@system_health"]);
                    self.databaseHealth(status.commandresult.characteristics["@@database_health"]);
                    self.hostFirmware(status.commandresult.characteristics["@@cs_firmware_version"]);
                    self.commFirmware(status.commandresult.characteristics["@@host_firmware_version"]);
                    self.gpsInstalled(parseInt(status.commandresult.gps_status["@@installed"], 10) !== 0);
                    self.gpsSatellites(status.commandresult.gps_status["@@gps_satellites"]);

                    var observableModules = [];

                    status.commandresult.inputs.list.item.forEach(function (module) {
                        const observableModule = ko.mapping.fromJS(module);
                        observableModules.push(observableModule);
                    });

                    self.modules(observableModules);

                    const observableAnalyzers = [];

                    status.commandresult.analyzers.list.item.forEach(function (analyzer) {
                        const observerableAnalyzer = ko.mapping.fromJS(analyzer);

                        observerableAnalyzer.analyzerType = ko.pureComputed({
                            read: () => parseInt(observerableAnalyzer["@@analyzer_type"](), 10)
                        });

                        observerableAnalyzer.analyzerTypeName = ko.pureComputed({
                            read: () => `[${observerableAnalyzer.analyzerType()}]: ${analyzerTypes[analyzerTypeKeys[observerableAnalyzer.analyzerType()]].name}`
                        });

                        observerableAnalyzer.isSelected = ko.pureComputed({
                            read: () => observerableAnalyzer.analyzerType() === viewModel.currentAnalyzerType()
                        });

                        observerableAnalyzer.montitoringStatus = ko.pureComputed({
                            read: () => parseInt(observerableAnalyzer["@@monitoring_on"](), 10) > 0 ? "On" : "Off"
                        });

                        observableAnalyzers.push(observerableAnalyzer);
                    });

                    self.analyzers(observableAnalyzers);

                    return dataHub.getInstanceConfig(deviceID).then(function (configResult) {
                        const config = JSON.parse(configResult);

                        self.versionInfo(config.commandresult.characteristics.psz_version_string["@@value"]);
                        self.ipAddress(config.commandresult.communications.tcp_ip["@@ip_address"]);
                        self.siteName(config.commandresult.characteristics.psz_sitename["@@value"]);

                        // Make sure table is refreshed
                        if (ko.options.deferUpdates)
                            ko.tasks.runEarly();

                        self.refreshValidationErrors();
                        self.isDirty(false);

                        $("[id=moduleRow]").css("visibility", "visible");
                        $("[id=analyzerRow]").css("visibility", "visible");
                    });
                })
                .fail(function (error) {
                    showErrorMessage(error, null, true);
                });
            }

            self.refreshValidationErrors = function() {
                // Make sure any initial validation error messages are visible
                self.errors.showAllMessages();
            }

            self.validationErrors = ko.pureComputed(function() {
                return self.errors().length;
            }).extend({ notify: "always" });
        }

        function showLoadingMessage() {
            $("#responsiveTableDiv").show();
            $("#loadingDataLabel").show();
        }

        function hideLoadingMessage() {
            $("#loadingDataLabel").hide();
            $("#bulkSelectionButtons").show();
        }

        function loadAnalyzerConfig(record) {
            const configID = parseInt(record["@@id"](), 10);
            const analyzerType = parseInt(record["@@analyzer_type"](), 10);

            if (viewModel.isDirty() && confirm("Do you want to keep the changes?"))
                viewModel.saveSection();

            showLoadingMessage();

            return viewModel.loadAnalyzerConfig(configID, analyzerType)
                .done(hideLoadingMessage)
                .fail(hideLoadingMessage);
        }

        function getActiveTabIndex() {
            return $("#tabs").tabs("option", "active");
        }

        function setActiveTabIndex(index) {
            $("#tabs").tabs({ active: index });
            $(`a[href='#tab${sectionKeys[viewModel.currentAnalyzerType()][index]}']`).parent().focus();
        }

        function getActiveTabSection() {
            const analyzerType = viewModel.currentAnalyzerType();
            return sections[analyzerType][sectionKeys[analyzerType][getActiveTabIndex()]];
        }

        function setActiveTabSection(section) {
            setActiveTabIndex(section.index);
        }

        // Page initialization function
        $(function() {
            $("#bodyContainer").addClass("fill-height");
            $("#pageHeader").css("margin-bottom", "-20px");

            // Enable deferred updates for better performance
            ko.options.deferUpdates = true;

            // Create the primary view model
            viewModel = new DeviceViewModel();

            // Initialize primary view model
            ko.applyBindings(viewModel, document.getElementsByTagName("body")[0]);

            // Monitor for view model changes
            ko.watch(viewModel.devices, { depth: -1 }, function(parents, child, item) {
                viewModel.isDirty(true);
            });

            // Let view model know about hub connectivity changes
            $(window).on("hubConnected", function() {
                viewModel.dataHubIsConnected(true);

                if (deviceID <= 0)
                    return;

                showLoadingMessage();

                dataHub.queryDeviceByID(deviceID).done(function (device) {
                    $("#editDeviceName").html(`Editing&nbsp;${device.Acronym}&nbsp;Configuration`);
                });

                viewModel.queryModules().done(function () {
                    viewModel.createSectionTabs(true);
                    return loadAnalyzerConfig(viewModel.analyzers()[viewModel.currentAnalyzerType()]);
                })
                .fail(hideLoadingMessage);
            });

            $(window).on("hubDisconnected", function() {
                viewModel.dataHubIsConnected(false);
            });

            if (deviceID === 0)
                $("#noDeviceDataMessage").show();
        });

        let shiftIsDown = false;

        $(document).keydown(function (e) {
            shiftIsDown = e.keyCode === 16;
        });

        $(document).keyup(function (e) {
            shiftIsDown = false;
        });

        function showToolTip() {
            if (shiftIsDown)
                $(this).tooltip("show");
        }

        function hideToolTip() {
            $(this).tooltip("hide");
        }

        function htmlEncode(value) {
            return $("<div/>").text(value).html().replace(/&/g, "%26");
        }

        function getVal(bankTarget) {
            const values = $(`#${bankTarget}`).val() || [];

            if (values.length > 0)
                return parseInt(values[0], 10);

            return 0;
        }

        function selectBankItem(bankTarget) {
            $(`[bank="${bankTarget}"]`).each(function () {
                try {
                    eval($(this).attr("update-expr"));
                } catch (e) {
                    console.error(e);
                }
            });
        }

        const PropDefType = {
            CHECKBOX: "0",
            NUMERIC: "1",
            FLOAT: "2",
            HEADER: "3",
            TEXT: "4",
            SELECT: "8"
        }

        const unmapped = 0;

        function elementTargetsCurrentAnalyzer(definition) {
            const currentAnalyzer = viewModel.currentAnalyzerType();
            let targetAnalyzer = 0;

            if (definition.hasOwnProperty("@@ANALYZER")) {
                let analyzer = definition["@@ANALYZER"].trim();

                // Check for exact match
                if (analyzer.endsWith("!")) {
                    analyzer = analyzer.substring(0, analyzer.length - 1);
                    return parseInt(analyzer, 10) === currentAnalyzer;
                }

                targetAnalyzer = parseInt(analyzer, 10);
            }

            // [0] PQ Data Node analyzer considered to apply to all
            return targetAnalyzer === 0 || currentAnalyzer === 0 || targetAnalyzer === currentAnalyzer;
        }

        function buildListElement(list, listID, map, bankTarget, readOnly, defaultVal, isBankList, rows) {
            const sizeToken = "[_SIZE-TOKEN_]";
            const html = [];
            const script = [];
            let index = 0;
            let totalOptions = 0;

            if (!bankTarget)
                bankTarget = "";

            if (isBankList) {
                script.push(`const update_${listID} = new Function("$('#${listID} option').removeAttr('selected'); $('#${listID} option[value=0]').prop('selected', true); $('#${listID}').focus();");`);
                html.push(`<select multiple class="form-control list-bank" id="${listID}"${sizeToken} onchange="selectBankItem('${listID}')" update-expr="update_${listID}()">`);
            } else {
                script.push(`const ${listID}_changed = new Function("${map} = getVal('${listID}'); viewModel.configChanged();");`);
                script.push(`const update_${listID} = new Function("${readOnly ? `` : `$('#${listID} option[value=' + ${map} + ']').prop('selected', true)`};");`);
                html.push(`<select class="form-control" id="${listID}" onchange="${listID}_changed()" update-expr="update_${listID}()" data-toggle="tooltip" title="${map}" bank="${bankTarget}">`);
            }

            for (let i = 0; i < list.ITEM.length; i++) {
                const value = list.ITEM[i];

                if (elementTargetsCurrentAnalyzer(value)) {
                    const optVal = value["@@VALUE"] || index;
                    html.push(`<option value="${optVal}"${optVal === defaultVal ? " selected" : ""}>${htmlEncode(value["@@ALIAS"] || value["@@NAME"])}</option>`);
                    totalOptions++;
                }
                index++;
            }

            let sizeAttribute = "";

            if (rows) {
                let selectSize = parseInt(rows, 10);

                if (selectSize > totalOptions && totalOptions > 0)
                    selectSize = totalOptions;

                sizeAttribute = ` size="${selectSize}"`;
            }

            html.push(`</select>`);

            return [ html.join("").replace(sizeToken, sizeAttribute), script.join("\r\n") ];
        }

        function buildPropDefElement(propDef, mapRoot, bankTarget) {
            if (parseInt(propDef["@@ENABLED"] || "1", 10) === 0)
                return [ "", "" ];

            const type = propDef["@@TYPE"];
            const name = propDef["@@NAME"];
            const alias = propDef["@@ALIAS"];
            const readOnly = parseInt(propDef["@@RO"] || "1", 10) > 0;
            const mapExpr = propDef["@@MAP"] || "unmapped";
            const map = String.format(mapExpr.startsWith(".") ? `${mapRoot}${mapExpr}` : mapExpr, bankTarget);
            const defaultVal = propDef["@@DEFAULT"];
            const placeHolder = propDef["@@PLACEHOLDER"];
            const placeHolderText = `${placeHolder ? ` placeholder="${placeHolder}"` : ``}`;
            const hasParam = propDef.hasOwnProperty("PARAM");
            const min = hasParam ? propDef.PARAM["@@MIN"] : undefined;
            const max = hasParam ? propDef.PARAM["@@MAX"] : undefined;
            const minMaxText = `${min ? ` min="${min}"` : ``}${max ? ` max="${max}"` : ``}`;
            const maxLen = hasParam ? propDef.PARAM["@@LEN"] : undefined;
            const maxLenText = `${maxLen ? ` maxlength="${maxLen}"` : ``}`;
            const html = [];
            const script = [];

            if (!bankTarget)
                bankTarget = "";

            html.push(`<tr><th class="text-right pad-right" width="30%">${alias || name}:</th><td>`);

            switch (type) {
                case PropDefType.CHECKBOX:
                    script.push(`const ${name}_changed = new Function("${map} = $('#${name}').prop('checked') ? '1' : '0'; viewModel.configChanged();");`);
                    script.push(`const update_${name} = new Function("${readOnly ? `` : `$('#${name}').prop('checked', parseInt(${map}, 10) > 0)`};");`);
                    html.push(`<input type="checkbox" id="${name}" onchange="${name}_changed()" update-expr="update_${name}()" data-toggle="tooltip" title="${map}" bank="${bankTarget}"/>`);
                    break;
                case PropDefType.NUMERIC:
                    script.push(`const ${name}_changed = new Function("${map} = $('#${name}').val(); viewModel.configChanged();");`);
                    script.push(`const update_${name} = new Function("${readOnly ? `` : `$('#${name}').val(${map})`};");`);
                    html.push(`<input type="number" class="form-control" id="${name}"${minMaxText}${placeHolderText} onchange="${name}_changed()" update-expr="update_${name}()" data-toggle="tooltip" title="${map}" bank="${bankTarget}"/>`);
                    break;
                case PropDefType.FLOAT:
                    script.push(`const ${name}_changed = new Function("${map} = $('#${name}').val(); viewModel.configChanged();");`);
                    script.push(`const update_${name} = new Function("${readOnly ? `` : `$('#${name}').val(parseFloat(${map}).toFixed(4))`};");`);
                    html.push(`<input type="number" class="form-control" id="${name}"${minMaxText}${placeHolderText} onchange="${name}_changed()" update-expr="update_${name}()" data-toggle="tooltip" title="${map}" bank="${bankTarget}"/>`);
                    break;
                case PropDefType.TEXT:
                    script.push(`const ${name}_changed = new Function("${map} = $('#${name}').val(); viewModel.configChanged();");`);
                    script.push(`const update_${name} = new Function("${readOnly ? `` : `$('#${name}').val(${map})`};");`);
                    html.push(`<input type="text" class="form-control" id="${name}"${maxLenText}${placeHolderText} onchange="${name}_changed()" update-expr="update_${name}()" data-toggle="tooltip" title="${map}" bank="${bankTarget}"/>`);
                    break;
                case PropDefType.SELECT:
                {
                    const [ listHtml, listScript ] = buildListElement(propDef.PARAM.LIST, name, map, bankTarget, readOnly, defaultVal);

                    html.push(listHtml);

                    if (listScript.length > 0)
                        script.push(listScript);
                }
                break;
            }

            html.push(`</td></tr>`);

            return [ elementTargetsCurrentAnalyzer(propDef) ? html.join("") : "", script.join("\r\n") ];
        }

        function buildBankElement(definition, mapRoot, sectionName) {
            const bankName = definition["@@NAME"];
            const bankAlias = definition["@@ALIAS"];
            const html = [];
            const script = [];

            html.push(`<tr><th class="header${definition.order > 0 ? "-section-row" : ""} bank-header"><div class="header">${bankAlias}</div></th></tr>`);
            html.push(`<tr class="bank-group"><td class="bank-group">`);

            var propDefsStarted = false;

            const startPropDefs = function () {
                if (propDefsStarted)
                    return;

                propDefsStarted = true;
                html.push(`<table class="section-elements">`);
            };

            const closePropDefs = function () {
                if (!propDefsStarted)
                    return;

                propDefsStarted = false;
                html.push(`</table>`);
            };

            const addPropDef = function (propDef) {
                if (propDef["@@TYPE"] === PropDefType.HEADER) {
                    console.warn(`Unexpected header property definition encountered in section "${sectionName}" bank "${bankName}"`);
                    return;
                }

                if (propDef.hasOwnProperty("@@NAME"))
                    propDef["@@NAME"] = `${bankName}_${propDef["@@NAME"]}`;

                const [ propDefHtml, propDefScript ] = buildPropDefElement(propDef, mapRoot, bankName);

                html.push(propDefHtml);

                if (propDefScript.length > 0)
                    script.push(propDefScript);
            }

            for (let key in definition) {
                if (definition.hasOwnProperty(key) && !key.startsWith("@@")) {
                    const value = definition[key];

                    switch (key) {
                        case "LIST":
                        {
                            const [ listHtml, listScript ] = buildListElement(value, bankName, null, null, false, null, true, definition["@@ROWS"]);

                            closePropDefs();
                            html.push(listHtml);

                            if (listScript.length > 0)
                                script.push(listScript);
                        }
                        break;
                        case "PROPDEF":
                        {
                            startPropDefs();

                            if (Array.isArray(value)) {
                                for (let i = 0; i < value.length; i++)
                                    addPropDef(value[i]);
                            }
                            else {
                                addPropDef(value);
                            }
                        }
                        break;
                    }
                }
            }

            closePropDefs();

            html.push(`</td></tr>`);
            html.push(`<tr><th class="header-section-row bank-footer"><div class="header"></div></th></tr>`);

            return [ elementTargetsCurrentAnalyzer(definition) ? html.join("") : "", script.join("\r\n") ];
        }

        function buildSection(section) {
            const mapRoot = `viewModel.currentAnalyzerConfig().${section["@@MAPROOT"]}`;
            const sectionName = section["@@NAME"];
            const html = [];
            const script = [];
            const definitions = [];
            let naturalOrder = 100000;

            html.push(`<table width="75%" class="table-center">`);

            var propDefsStarted = false;

            const startPropDefs = function () {
                if (propDefsStarted)
                    return;

                propDefsStarted = true;
                html.push(`<tr><td><table class="section-elements">`);
            };

            const closePropDefs = function () {
                if (!propDefsStarted)
                    return;

                propDefsStarted = false;
                html.push(`</table></td></tr>`);
            };

            const addSectionElementDefinition = function (definition, elementType) {
                if (definition.hasOwnProperty("@@NAME") && definition["@@TYPE"] !== PropDefType.HEADER)
                    definition["@@NAME"] = `${sectionName}Section_${definition["@@NAME"]}`;

                definition.order = definition.hasOwnProperty("@@ORDER") ?
                    parseInt(definition["@@ORDER"], 10) :
                    definitions.length > 0 ? naturalOrder++ : 0;

                definition.elementType = elementType;

                definitions.push(definition);
            }

            const addSectionElementDefinitions = function (elementType) {
                const definition = section[elementType];

                if (!definition)
                    return;

                if (Array.isArray(definition)) {
                    for (let i = 0; i < definition.length; i++) {
                        addSectionElementDefinition(definition[i], elementType);
                    }
                }
                else {
                    addSectionElementDefinition(definition, elementType);
                }
            };

            addSectionElementDefinitions("BANK");
            addSectionElementDefinitions("PROPDEF");

            definitions.sort((a, b) => a.order > b.order ? 1 : -1);

            for (let i = 0; i < definitions.length; i++) {
                const definition = definitions[i];

                switch (definition.elementType) {
                    case "BANK":
                    {
                        const [ bankHtml, bankScript ] = buildBankElement(definition, mapRoot, sectionName);

                        closePropDefs();
                        html.push(bankHtml);

                        if (bankScript.length > 0)
                            script.push(bankScript);
                    }
                    break;
                    case "PROPDEF":
                    {
                        if (definition["@@TYPE"] === PropDefType.HEADER) {
                            if (elementTargetsCurrentAnalyzer(definition)) {
                                closePropDefs();
                                html.push(`<tr><th class="header${definition.order > 0 ? "-section-row": ""}"><div class="header">${definition["@@ALIAS"] || definition["@@NAME"]}</div></th></tr>`);
                            }
                        }
                        else {
                            const [ propDefHtml, propDefScript ] = buildPropDefElement(definition, mapRoot);

                            startPropDefs();
                            html.push(propDefHtml);

                            if (propDefScript.length > 0)
                                script.push(propDefScript);
                        }
                    }
                    break;
                }
            }

            closePropDefs();
            html.push(`</table>`);

            return [ html.join(""), script.join("\r\n") ];
        }
    </script>
}
