@*******************************************************************************************************
//  DranetzConfig.cshtml - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  05/19/2021 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Net.Http
@using System.Threading
@using GSF.Identity
@using GSF.Security
@using GSF.Web
@using GSF.Web.Model
@using GSF.Web.Shared
@using openMIC.Model
@* ReSharper disable Html.PathError *@
@* ReSharper disable UnknownCssClass *@
@inherits ExtendedTemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.HidePageTitle = true;
    ViewBag.Title = "Manage Dranetz Configuration";

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();
    string parameter;
    int deviceID;

    if (!parameters.TryGetValue("DeviceID", out parameter) || !int.TryParse(parameter, out deviceID)) {
        deviceID = 0;
    }

    //bool userIsEditor = UserIsEditor();
}
@section StyleSheets {
    <link href="@Resources.Root/Shared/Content/jquery-ui.css" rel="stylesheet">
    <style>
        html, body {
            height: 100%;
        }

        span.new-record {
            border: red;
            border-style: solid;
            border-width: 4px;
            display: inline-block;
            padding-left: 3px;
            padding-right: 4px;
        }

        span.existing-record {
            border: lawngreen;
            border-style: solid;
            border-width: 4px;
            display: inline-block;
            padding-left: 3px;
            padding-right: 4px;
        }

        /* Prevent label wrapping */
        #baseURLArea {
            width: 80%;
            display: inline-table;
            vertical-align: middle;
        }

        th.pad-right {
            padding-right: 8px;
            white-space: nowrap;
            width: 50%;
        }

        th.header {
            text-align: center;
            font-size: 18px;
            font-weight: bolder;
            padding-bottom: 5px;
            width: 100%;
        }

        th.header-section-row {
            text-align: center;
            font-size: 18px;
            font-weight: bolder;
            padding-bottom: 5px;
            padding-top: 15px;
            width: 100%;
        }

        div.header {
            border-bottom: solid;
        }

        .list-bank {
            margin-bottom: 10px;
        }

        .btn-bank {
            padding-top: 0;
            padding-bottom: 0;
            padding-left: 5px;
        }

        /* Collapsable button style */
        .btn-collapsable.btn {
            color: #606060;
            font-family: "Glyphicons Halflings";
            font-size: 8pt;
            position: relative;
            top: -9px;
            right: -14px;
            padding: 0 2px 2px 2px;
            height: 18px;
            float: right !important;
        }

        /* Collapsable button icon when content is shown - arrow down */
        .btn-collapsable.btn:after {
            content: "\e114";
        }

        /* Collapsable button icon when content is hidden - arrow right */
        .btn-collapsable.btn.collapsed:after {
            content: "\e080";
        }

        .ui-tabs .ui-tabs-nav li a {
            font-size: 10pt !important;
        }

        @@media screen {
            .page-logo {
                margin-bottom: -25px;
                margin-top: 8px;
            }
        }

        @@media screen and (min-width: 992px) {
            .page-logo {
                margin-bottom: -25px;
                margin-top: 3px;
            }
        }
    </style>
}
@functions {
    public string GetCurrentUserID()
    {
        if (Thread.CurrentPrincipal.Identity == null)
            return UserInfo.CurrentUserID;

        return Thread.CurrentPrincipal.Identity.Name;
    }

    // This function simply limits access to UI elements that the user does not have access to, server-side
    // functions will further validate user rights even if UI restriction was somehow bypassed
    public bool UserIsEditor()
    {
        SecurityPrincipal securityPrincipal = ViewBag.SecurityPrincipal as SecurityPrincipal;

        if ((object)securityPrincipal == null)
            return false;

        return securityPrincipal.IsInRole("Administrator") || securityPrincipal.IsInRole("Editor");
    }
}
<div style="display: none" search-header></div>
<h3 style="margin-top: -10px;">@ViewBag.Title <span class="label label-info" id="editDeviceName"></span> <img class="page-logo pull-right" src="Images/DranetzConfigEditor.png" /></h3>
<hr class="quarter-break" />
<div id="contentWell" class="well well-dynamic-content" content-fill-height>
    <div id="responsiveTableDiv" class="table-responsive" style="display: none; border: none">
        <table width="100%">
            <tr>
                <td width="50%" style="vertical-align: top">
                    <table width="95%">
                        <tr>
                            <th class="header" colspan="2"><div class="header">System</div></th>
                        </tr>
                        <tr>
                            <th class="text-center" style="padding-top: 2px; padding-bottom: 5px" colspan="2" data-bind="text: versionInfo"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Serial Number:</th>
                            <td class="text-left" data-bind="text: serialNumber"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">System Health:</th>
                            <td class="text-left" data-bind="text: systemHealth"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Database Health:</th>
                            <td class="text-left" data-bind="text: databaseHealth"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Comm. Module Firmware:</th>
                            <td class="text-left" data-bind="text: commFirmware"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Host Module Firmware:</th>
                            <td class="text-left" data-bind="text: hostFirmware"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">GPS Installed:</th>
                            <td class="text-left" data-bind="text: gpsInstalled"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">GPS Satellites:</th>
                            <td class="text-left" data-bind="text: gpsSatellites"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">IP Address:</th>
                            <td class="text-left" data-bind="text: ipAddress"/>
                        </tr>
                        <tr>
                            <th class="text-right pad-right">Site Name:</th>
                            <td class="text-left" data-bind="text: siteName"/>
                        </tr>
                    </table>
                </td>
                <td width="50%" style="vertical-align: top">
                    <table width="95%">
                        <tr>
                            <th class="header"><div class="header">Input Modules</div></th>
                        </tr>
                        <tr>
                            <td>
                                <table class="table table-condensed table-striped table-hover">
                                    <thead>
                                    <tr>
                                        <th class="text-center">ID</th>
                                        <th class="text-center">Model&nbsp;Number</th>
                                        <th class="text-center">Firmware</th>
                                        <th class="text-center">Changed?</th>
                                    </tr>
                                    </thead>
                                    <tbody data-bind="foreach: modules">
                                    <tr id="moduleRow" style="visibility: hidden">
                                        <td width="5%" class="text-center valign-middle" data-bind="text: $data['@@id']"/>
                                        <td width="75%" class="text-center valign-middle" style="white-space: nowrap"><span data-bind="text: $data['@@model']"></span></td>
                                        <td width="15%" class="text-center valign-middle"><span data-bind="text: $data['@@firmware_version']"></span></td>
                                        <td width="5%" class="text-center valign-middle"><span data-bind="text: $data['@@module_changed']"></span></td>
                                    </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr>
                <td colspan="2" style="padding-top: 5px">
                    <table width="50%" style="margin: auto">
                        <tr>
                            <th class="header"><div class="header">Analyzers</div></th>
                        </tr>
                        <tr>
                            <td>
                                <table class="table table-condensed table-striped table-hover">
                                    <thead>
                                    <tr>
                                        <th class="text-center">Name</th>
                                        <th class="text-center">Type</th>
                                        <th class="text-center">Monitoring&nbsp;Status</th>
                                    </tr>
                                    </thead>
                                    <tbody data-bind="foreach: analyzers">
                                    <tr id="analyzerRow" style="visibility: hidden">
                                        <td width="80%" class="text-center valign-middle" style="white-space: nowrap"><btn type="button" class="btn btn-link" style="padding: 0" data-bind="text: $data['@@name'], click: loadAnalyzerConfig.bind($data)"/></td>
                                        <td width="10%" class="text-center valign-middle" data-bind="text: $data['@@analyzer_type']"/>
                                        <td width="10%" class="text-center valign-middle"><span data-bind="text: parseInt($data['@@monitoring_on']()) > 0 ? 'On' : 'Off'"></span></td>
                                    </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    </table>

                </td>
            </tr>
        </table>
        <div id="loadingDataLabel" style="display: none">
            Loading&nbsp;&nbsp;<span class="glyphicon glyphicon-refresh glyphicon-spin"></span>
        </div>
        <div id="tabs">
            <ul>
                <li><a href="#tab1">Input Configuration</a></li>
                <li><a href="#tab2">RMS Variations</a></li>
                <li><a href="#tab3">Transients</a></li>
                <li><a href="#tab4">Waveform Capture</a></li>
                <li><a href="#tab5">Power</a></li>
                <li><a href="#tab6">Energy and Demand</a></li>
                <li><a href="#tab7">Harmonics</a></li>
                <li><a href="#tab8">Flicker</a></li>
                <li><a href="#tab9">Cross-Triggering</a></li>
            </ul>
            <div id="tab1" class="ui-tabs-active">
                <table width="75%">
                    <tr>
                        <th class="header"><div class="header">Input Configuration</div></th>
                    </tr>
                </table>
            </div>
            <div id="tab2" style="display: none">
                <table width="75%">
                    <tr>
                        <th class="header"><div class="header">RMS Variations</div></th>
                    </tr>
                </table>
            </div>
            <div id="tab3" style="display: none">
                <table width="75%">
                    <tr>
                        <th class="header"><div class="header">Transients</div></th>
                    </tr>
                </table>
            </div>
            <div id="tab4" style="display: none">
                <table width="75%">
                    <tr>
                        <th class="header"><div class="header">Waveform Capture</div></th>
                    </tr>
                </table>
            </div>
            <div id="tab5" style="display: none">
                <table width="75%">
                    <tr>
                        <th class="header"><div class="header">Power</div></th>
                    </tr>
                </table>
            </div>
            <div id="tab6" style="display: none">
                <table width="75%">
                    <tr>
                        <th class="header"><div class="header">Energy and Demand</div></th>
                    </tr>
                </table>
            </div>
            <div id="tab7" style="display: none">
                <table width="75%">
                    <tr>
                        <th class="header"><div class="header">Harmonics</div></th>
                    </tr>
                </table>
            </div>
            <div id="tab8" style="display: none">
                <table width="75%">
                    <tr>
                        <th class="header"><div class="header">Flicker</div></th>
                    </tr>
                </table>
            </div>
            <div id="tab9" style="display: none">
                <table width="75%">
                    <tr>
                        <th class="header"><div class="header">Cross-Triggering</div></th>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    <h3 id="noDeviceDataMessage" style="display: none; color: red">
        No device data could be loaded for device with <code>ID=@deviceID</code>
    </h3>
</div>
<hr id="view-spacer" class="thick-spacer" style="margin-top: -10px; margin-bottom: 8px"/>
<div class="panel panel-default">
    <div class="panel-heading" style="height: 30px; padding-top: 5px">
        <label>Analyzer&nbsp;Configuration</label>
        <button type="button" class="btn btn-xs btn-collapsable collapsed" style="top: 0; right: -10px" data-toggle="collapse" data-target="#analyzerConfiguration"></button>
    </div>
    <div class="panel-body collapse" style="padding: 2px; margin-bottom: -10px" id="analyzerConfiguration">
        <pre data-bind="text: JSON.stringify(currentAnalyzerConfig(), null, 4)"></pre>
    </div>
</div>
@section Scripts {
    <script src="@Resources.Root/Shared/Scripts/knockout.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.mapping.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.validation.js"></script>
    <script src="@Resources.Root/Shared/Scripts/knockout.reactor.js"></script>
    <script src="@Resources.Root/Shared/Scripts/gsf.web.knockout.js"></script>

    <script>
        "use strict";

        var viewModel = null;
        var deviceID = @deviceID;

        function DeviceViewModel() {
            const self = this;

            // Observable fields
            self.versionInfo = ko.observable("Encore Series Dranetz-BMI");
            self.serialNumber = ko.observable("");
            self.systemHealth = ko.observable("querying...");
            self.databaseHealth = ko.observable("");
            self.hostFirmware = ko.observable("");
            self.commFirmware = ko.observable("");
            self.gpsInstalled = ko.observable(false);
            self.gpsSatellites = ko.observable(0);
            self.ipAddress = ko.observable("");
            self.siteName = ko.observable("");
            self.modules = ko.observableArray();
            self.analyzers = ko.observableArray();
            self.currentAnalyzerConfig = ko.observable("");
            self.errors = ko.validation.group(self);

            // Internal fields
            self._dataHubIsConnected = ko.observable(false);
            self._isDirty = ko.observable(false);

            // Properties
            self.dataHubIsConnected = ko.pureComputed({
                read: self._dataHubIsConnected,
                write: function (value) {
                    if (value === undefined)
                        value = false;

                    self._dataHubIsConnected(value);

                    if (value)
                        self.refreshValidationErrors();
                },
                owner: self
            });

            self.isDirty = ko.pureComputed({
                read: self._isDirty,
                write: function (value) {
                    if (value === undefined)
                        value = true;

                    self._isDirty(value);
                },
                owner: self
            });

            // Methods

            self.loadAnalyzerConfig = function (configID) {
                if (!self.dataHubIsConnected())
                    return $.Deferred().resolve().promise();

                return dataHub.getAnalyzerConfig(deviceID, configID).then(function (configResult) {
                    self.currentAnalyzerConfig(JSON.parse(configResult));
                }).then(function () {
                    return dataHub.getSectionMap("InputConfiguration.xml").done(function (result) {
                        const sectionHtml = buildSection(JSON.parse(result).SECTION);
                        $("#tab1").html(sectionHtml);
                    });
                }).then(function () {
                    $("[update-expr]").each(function () {
                        try {
                            eval($(this).attr("update-expr"));
                        } catch (e) {
                            console.error(e);
                        }
                    });
                });
            }

            self.queryModules = function () {
                if (!self.dataHubIsConnected())
                    return $.Deferred().resolve().promise();

                $("[id=moduleRow]").css("visibility", "hidden");
                $("[id=analyzerRow]").css("visibility", "hidden");
                self.modules.removeAll();

                return dataHub.getInstanceStatus(deviceID).then(function (statusResult) {
                    const status = JSON.parse(statusResult);

                    self.serialNumber(status.commandresult.characteristics["@@serial_number"]);
                    self.systemHealth(status.commandresult.characteristics["@@system_health"]);
                    self.databaseHealth(status.commandresult.characteristics["@@database_health"]);
                    self.hostFirmware(status.commandresult.characteristics["@@cs_firmware_version"]);
                    self.commFirmware(status.commandresult.characteristics["@@host_firmware_version"]);
                    self.gpsInstalled(parseInt(status.commandresult.gps_status["@@installed"]) !== 0);
                    self.gpsSatellites(status.commandresult.gps_status["@@gps_satellites"]);

                    var observableModules = [];

                    status.commandresult.inputs.list.item.forEach(function (module) {
                        const observableModule = ko.mapping.fromJS(module);
                        observableModules.push(observableModule);
                    });

                    self.modules(observableModules);

                    var observableAnalyzers = [];

                    status.commandresult.analyzers.list.item.forEach(function (analyzer) {
                        const observerableAnalyzer = ko.mapping.fromJS(analyzer);
                        observableAnalyzers.push(observerableAnalyzer);
                    });

                    self.analyzers(observableAnalyzers);

                    return dataHub.getInstanceConfig(deviceID).then(function (configResult) {
                        const config = JSON.parse(configResult);

                        self.versionInfo(config.commandresult.characteristics.psz_version_string["@@value"]);
                        self.ipAddress(config.commandresult.communications.tcp_ip["@@ip_address"]);
                        self.siteName(config.commandresult.characteristics.psz_sitename["@@value"]);

                        // Make sure table is refreshed
                        if (ko.options.deferUpdates)
                            ko.tasks.runEarly();

                        self.refreshValidationErrors();
                        self.isDirty(false);

                        $("[id=moduleRow]").css("visibility", "visible");
                        $("[id=analyzerRow]").css("visibility", "visible");
                    });
                })
                .fail(function (error) {
                    showErrorMessage(error);
                });
            }

            self.refreshValidationErrors = function() {
                // Make sure any initial validation error messages are visible
                self.errors.showAllMessages();
            }

            self.validationErrors = ko.pureComputed(function() {
                return self.errors().length;
            }).extend({ notify: "always" });
        }

        function getActiveTab() {
            return $("#tabs").tabs("option", "active");
        }

        function setActiveTab(tabIndex) {
            $("#tabs").tabs({ active: tabIndex });
            $("a[href='#tab" + (tabIndex + 1) + "']").parent().focus();
        }

        function showLoadingMessage() {
            $("#responsiveTableDiv").show();
            $("#loadingDataLabel").show();
        }

        function hideLoadingMessage() {
            $("#loadingDataLabel").hide();
            $("#bulkSelectionButtons").show();
        }

        function loadAnalyzerConfig(record) {
            const configID = parseInt(record["@@id"]());

            showLoadingMessage();

            viewModel.loadAnalyzerConfig(configID)
                .done(hideLoadingMessage)
                .fail(hideLoadingMessage);
        }

        // Page initialization function
        $(function() {
            $("#bodyContainer").addClass("fill-height");
            $("#pageHeader").css("margin-bottom", "-20px");

            $("#tabs").tabs({
                active: 0,
                activate: function(event, ui) {
                    switch (ui.newPanel.attr("id")) {
                        case "tab1":
                            break;
                        case "tab2":
                            break;
                        case "tab3":
                            break;
                    }
                }
            });

            // Enable knockout validation
            ko.validation.init({
                registerExtenders: true,
                messagesOnModified: true,
                insertMessages: true,
                parseInputAttributes: true,
                allowHtmlMessages: true,
                messageTemplate: null,
                decorateElement: true,
                errorElementClass: "has-error",
                errorMessageClass: "help-block",
                grouping: { deep: true, observable: true, live: true }
            }, true);

            // Enable deferred updates for better performance
            ko.options.deferUpdates = true;

            // Create the primary view model
            viewModel = new DeviceViewModel();

            // Initialize primary view model
            ko.applyBindings(viewModel, document.getElementsByTagName("body")[0]);

            // Monitor for view model changes
            ko.watch(viewModel.devices, { depth: -1 }, function(parents, child, item) {
                viewModel.isDirty(true);
            });

            // Let view model know about hub connectivity changes
            $(window).on("hubConnected", function() {
                viewModel.dataHubIsConnected(true);

                if (deviceID <= 0)
                    return;

                showLoadingMessage();

                dataHub.queryDeviceByID(deviceID).done(function (device) {
                    $("#editDeviceName").html("Editing&nbsp;" + device.Acronym + "&nbsp;Configuration");
                });

                viewModel.queryModules()
                    .done(hideLoadingMessage)
                    .fail(hideLoadingMessage);
            });

            $(window).on("hubDisconnected", function() {
                viewModel.dataHubIsConnected(false);
            });

            if (deviceID === 0)
                $("#noDeviceDataMessage").show();
        });

        function htmlEncode(value) {
            return $("<div/>").text(value).html().replace(/&/g, "%26");
        }

        function getVal(name) {
            const values = $(`#${name}`).val() || [];

            if (values.length > 0)
                return parseInt(values[0], 10);

            return 0;
        }

        function selectBankItem(bankTarget) {
            $(`[${bankTarget}]`).each(function () {
                try {
                    eval($(this).attr("update-expr"));
                } catch (e) {
                    console.error(e);
                }
            });
        }

        const PropDefType = {
            CHECKBOX: "0",
            NUMERIC: "1",
            FLOAT: "2",
            HEADER: "3",
            TEXT: "4",
            SELECT: "8"
        }

        function buildListElement(list, listID, map, bankTarget, readOnly, defaultVal, isBankList) {
            const html = [];
            let index = 0;

            if (!bankTarget)
                bankTarget = "";

            if (isBankList)
                html.push(`<select multiple class="form-control list-bank" id="${listID}" onchange="selectBankItem('${listID}')" update-expr="$('#${listID} option[value=0]').prop('selected', true)">`);
            else
                html.push(`<select class="form-control" id="${listID}" onchange="${map} = getVal('${listID}')" update-expr="${readOnly ? `` : `$('#${listID} option[value=' + ${map} + ']').prop('selected', true)`}" ${bankTarget}>`);

            for (let i = 0; i < list.ITEM.length; i++) {
                const value = list.ITEM[i];
                const optVal = value["@@VALUE"] || index;
                html.push(`<option value="${optVal}"${optVal === defaultVal ? " selected" : ""}>${htmlEncode(value["@@NAME"])}</option>`);
                index++;
            }

            html.push("</select>");

            return html.join("");
        }

        function buildPropDefElement(propDef, mapRoot, bankTarget) {
            if (parseInt(propDef["@@ENABLED"] || "1") === 0)
                return "";

            const type = propDef["@@TYPE"];
            const name = propDef["@@NAME"];
            const alias = propDef["@@ALIAS"];
            const readOnly = parseInt(propDef["@@RO"] || "1") > 0;
            const mapExpr = propDef["@@MAP"] || "";
            const map = mapExpr.startsWith(".") ? `${mapRoot}${mapExpr}` : mapExpr;
            const defaultVal = propDef["@@DEFAULT"];
            const maxLen = propDef.PARAM ? propDef.PARAM["@@LEN"] : null;
            const html = [];

            if (!bankTarget)
                bankTarget = "";

            html.push(`<tr><th class="text-right pad-right" width="30%">${alias || name}:</th><td>`);

            switch (type) {
                case PropDefType.CHECKBOX:
                    html.push(`<input type="checkbox" id="${name}" onchange="${map} = $('#${name}').prop('checked') ? '1' : '0'" update-expr="${readOnly ? `` : `$('#${name}').prop('checked', parseInt(${map}) > 0)`}" ${bankTarget}/>`);
                    break;
                case PropDefType.NUMERIC:
                    html.push(`<input type="number" id="${name}" onchange="${map} = $('#${name}').val()" update-expr="${readOnly ? `` : `$('#${name}').val(${map})`}" ${bankTarget}/>`);
                    break;
                case PropDefType.FLOAT:
                    html.push(`<input type="number" id="${name}" onchange="${map} = $('#${name}').val()" update-expr="${readOnly ? `` : `$('#${name}').val(parseFloat(${map}).toFixed(4))`}" ${bankTarget}/>`);
                    break;
                case PropDefType.TEXT:
                    html.push(`<input type="text" id="${name}"${maxLen ? `` : ` maxlength="${maxLen}"`} onchange="${map} = $('#${name}').val()" update-expr="${readOnly ? `` : `$('#${name}').val(${map})`}" ${bankTarget}/>`);
                    break;
                case PropDefType.SELECT:
                    html.push(buildListElement(propDef.PARAM.LIST, name, map, bankTarget, readOnly, defaultVal));
                    break;
            }

            html.push("</td></tr>");

            return html.join("");
        }

        function buildBankElement(bank, mapRoot) {
            const bankName = bank["@@NAME"];
            const bankAlias = bank["@@ALIAS"];
            const html = [];

            html.push(`<tr><th class="header"><div class="header">${bankAlias}</div></th></tr>`);
            html.push("<tr><td>");

            var propDefsStarted = false;

            const startPropDefs = function () {
                if (propDefsStarted)
                    return;

                propDefsStarted = true;
                html.push("<table width=\"100%\">");
            };

            const closePropDefs = function () {
                if (!propDefsStarted)
                    return;

                propDefsStarted = false;
                html.push("</table>");
            };

            for (let key in bank) {
                if (bank.hasOwnProperty(key) && !key.startsWith("@@")) {
                    const value = bank[key];

                    switch (key) {
                        case "LIST":
                            closePropDefs();
                            html.push(buildListElement(value, bankName, null, null, false, null, true));
                            break;
                        case "PROPDEF":
                            startPropDefs();
                            for (let i = 0; i < value.length; i++) {
                                html.push(buildPropDefElement(value[i], mapRoot, bankName));
                            }
                            break;
                    }
                }
            }

            closePropDefs();

            html.push("</td></tr>");
            html.push("<tr><th class=\"header-section-row\"><div class=\"header\"></div></th></tr>");

            return html.join("");
        }

        function buildSection(section) {
            const mapRoot = `viewModel.currentAnalyzerConfig().${section["@@MAPROOT"]}`;
            const html = [];

            html.push("<table width=\"75%\">");

            var propDefsStarted = false;

            const startPropDefs = function () {
                if (propDefsStarted)
                    return;

                propDefsStarted = true;
                html.push("<tr><td><table width=\"100%\">");
            };

            const closePropDefs = function () {
                if (!propDefsStarted)
                    return;

                propDefsStarted = false;
                html.push("</table></td></tr>");
            };

            for (let key in section) {
                if (section.hasOwnProperty(key) && !key.startsWith("@@")) {
                    const value = section[key];

                    switch (key) {
                        case "BANK":
                            closePropDefs();
                            html.push(buildBankElement(value, mapRoot));
                            break;
                        case "PROPDEF":
                            for (let i = 0; i < value.length; i++) {
                                const propDef = value[i];

                                if (propDef["@@TYPE"] === PropDefType.HEADER) {
                                    closePropDefs();
                                    html.push(`<tr><th class="header-section-row"><div class="header">${propDef["@@ALIAS"] || propDef["@@NAME"]}</div></th></tr>`);
                                }
                                else {
                                    startPropDefs();
                                    html.push(buildPropDefElement(propDef, mapRoot));
                                }
                            }
                            break;
                    }
                }
            }

            closePropDefs();
            html.push("</table>");

            return html.join("");
        }
    </script>
}
